<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>대구 올빼미의 새벽 개발로그</title>
    <description>대구 올빼미의 새벽 개발로그</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 13 Apr 2019 08:07:28 +0900</pubDate>
    <lastBuildDate>Sat, 13 Apr 2019 08:07:28 +0900</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>2019_04_12_TIL(자료구조)</title>
        <description>&lt;h3 id=&quot;20190412-til&quot;&gt;2019.04.12 TIL&lt;/h3&gt;

&lt;p&gt;(TIL은 스스로 이해한 것을 바탕으로 정리한 것으로 오류가 있을 수 있습니다)&lt;/p&gt;

&lt;p&gt;# 질문에 답하기&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;자료구조&quot;&gt;자료구조&lt;/h1&gt;

&lt;p&gt;자료구조에 대한 정의는 너무나도 많다. 
그 중에 가장 마음에 와닿는 글이 있어서 정리를 해본다.&lt;/p&gt;

&lt;p&gt;” &lt;strong&gt;프로그래밍은 결국 데이터를 다루는 방법입니다. 데이터를 입력받고, 데이터를 처리하여 도출된 데이터를 출력합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자료구조는 데이터를 입력 받아 어떻게 저장하는 지에 대한 학문입니다.   &lt;br /&gt;
데이터를 어떻게 저장하는지(입력), 어떻게 찾는지(탐색), 어떻게 지우는지(삭제)가 
자료구조의 종류에 따라 천차만별입니다.&lt;/p&gt;

&lt;p&gt;그럼, 어떤 자료구조를 언제 사용해야 할까요? 이는 결국 성능과 효율적인 메모리 사용에 달려있습니다.   &lt;br /&gt;
프로그래머가 처한 상황에서 가장 뛰어난 성능을 내고 또 가장 효율적으로 메모를 사용한다면 그 자료구조를 선택하면 됩니다.&lt;/p&gt;

&lt;p&gt;알고리즘은 방법론입니다.  많은 알고리즘이 있지만, 자료구조에 연관된 알고리즘만 언급하겠습니다.    &lt;br /&gt;
자료구조와 알고리즘은 매우 밀접한 연관을 가지고 있습니다. 위에 언급한 삽입 정렬과 병합 정렬은 엄밀히 말해 알고리즘입니다. 하지만 자료구조를 배울 때 반드시 마주치게 되지요. 알고리즘은 자료구조를 구현하는 방법이라고 보시면 될 것 같습니다.  “&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[“프로그래머가 갖추어야 할 ‘기본’은 무엇인가?” 넥슨 개발자 컨퍼런스(NDC) 참관 후기&lt;/td&gt;
      &lt;td&gt;패스트캠퍼스](https://www.fastcampus.co.kr/dev_school_gds_blog_feature_1/)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;자료구조의-구성&quot;&gt;자료구조의 구성&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;insert : 어떻게 데이터를 넣을 것인가?&lt;/li&gt;
  &lt;li&gt;search : 어떻게 데이터를 찾을 것인가?&lt;/li&gt;
  &lt;li&gt;delete : 어떻게 데이터를 삭제할 것인가?&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;자료구조의-분류&quot;&gt;자료구조의 분류&lt;/h1&gt;

&lt;p&gt;&lt;img width=&quot;712&quot; alt=&quot;자료구조&quot; src=&quot;https://user-images.githubusercontent.com/46436843/56032569-74892f00-5d5d-11e9-9b46-0b7a899faade.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단순구조 : 프로그래밍에서 사용되는 기본 데이터 타입&lt;/li&gt;
  &lt;li&gt;선형구조 : 저장되는 자료의 전후관계가 1:1 (리스트, 스택, 큐 등)&lt;/li&gt;
  &lt;li&gt;비선형구조 : 데이터 항목 사이의 관계가 1:n 또는 n:m (트리, 그래프 등)&lt;/li&gt;
  &lt;li&gt;파일구조 : 서로 관련된 필드들로 구성된 레코드의 집합인 파일에 대한 자료구조&lt;/li&gt;
  &lt;li&gt;출처 : &lt;a href=&quot;https://wayhome25.github.io/cs/2017/04/17/cs-18/&quot;&gt;강의노트 17. 알고리즘, 자료구조 개요 · 초보몽키의 개발공부로그&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;선형구조배열과-linked-list-그리고-스택과-큐&quot;&gt;선형구조(배열과 linked list 그리고 스택과 큐)&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;배열(array)
    &lt;ol&gt;
      &lt;li&gt;같은 자료형의 변수를 모아 놓은 것&lt;/li&gt;
      &lt;li&gt;인덱싱 활용 가능(search)
        &lt;ol&gt;
          &lt;li&gt;검색으로 배열을 이길 수는 없다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;데이터가 군집화 되어있다.
        &lt;ol&gt;
          &lt;li&gt;캐시히트의 가능성이 높다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;검색속도가 그 어떤 자료구조보다 빠르다.O(1)&lt;/li&gt;
      &lt;li&gt;데이터의 삽입과 삭제가 느리다. 최악의 경우 O(n)
        &lt;ol&gt;
          &lt;li&gt;맨 앞에 데이터를 삽입하게 되면 모든 데이터를 복사해서 한칸씩 다 옴겨야 한다.&lt;/li&gt;
          &lt;li&gt;배열은 공백을 인정하지 않는다. O(n)&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Linked list ( 데이터의 삽입과 삭제가 많고, 검색이 별로 없을 때)
    &lt;ol&gt;
      &lt;li&gt;검색 속도 최악 O(n)&lt;/li&gt;
      &lt;li&gt;데이터의 삽입과 삭제는 O(1)
        &lt;ol&gt;
          &lt;li&gt;어디든 데이터를 놓고 연결만 해주면 된다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;데이터가 흩어져 있다.
        &lt;ol&gt;
          &lt;li&gt;캐시히트의 가능성이 굉장히 떨어진다. -&amp;gt; 캐시미스 발생&lt;/li&gt;
          &lt;li&gt;페이지폴트까지 날수도 있다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;미리 힙을 주고 흩어져 있는 문제를 해결할 수 있다.
        &lt;ol&gt;
          &lt;li&gt;다이나믹 힙&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Stack
    &lt;ol&gt;
      &lt;li&gt;무언가를 쌓는다라는 의미를 가진 자료구조이다.&lt;/li&gt;
      &lt;li&gt;LIFO(Last in, First out) : 후입선출&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Queue
    &lt;ol&gt;
      &lt;li&gt;우리의 일반적인 줄서기&lt;/li&gt;
      &lt;li&gt;FIFO(First in, First out) : 선입선출&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;만약에 배열과 Linked list 2개 다 사용가능한 상황이면 무조건 배열을 쓴다.
배열은 메모리의 스택에 할당해서 사용한다.&lt;/p&gt;

&lt;h2 id=&quot;파이썬에서의-list&quot;&gt;파이썬에서의 list&lt;/h2&gt;

&lt;p&gt;파이썬의 list는 배열과 다르다.       &lt;br /&gt;
파이썬은 포인터 배열이다.       &lt;br /&gt;
포인터는 배열처럼 일렬로 되어 있으나, [1,2,3]          &lt;br /&gt;
1은 class int 여서 상수객체이기 때문에 4바이트보다 훨씬 크다.&lt;/p&gt;

&lt;p&gt;파이썬의 리스트는 파이썬에서는 같은 자료형의 변수를 모아 놓은 것이 아니다.      &lt;br /&gt;
파이썬에는 배열이라는 자료구조가 없는 것이다. 즉 지원하지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;예시&quot;&gt;예시&lt;/h2&gt;

&lt;h3 id=&quot;얕은-복사&quot;&gt;얕은 복사&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#얕은 복사&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# or copy.copy(li)도 가능&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li3&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;#[1,2,3,4]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li3&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;#[1,2,3,4,5]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;#[1,2,3,4]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 내용을 이해하기 위해서는 단순히 객체가 [1,2,3,4]의 형태처럼 메모리에 올라가 있다고 생각하면 안된다.
실제적으로 파이썬에서 list를 생성한다고 하더라도 모두 모여서 메모리에 올라가지 않는다. [* , * , * , * ]와 같은 형태로 생성되어 첫번째 * 은 1을 가르키고 두 번째 * 은 2를 가르키고 이런 형식이다. 얕은 복사는 [* , * , * , * ]를 복사해 온 것이다. 따라서 li3는 li의 [* , * , * , * ]를 복사해온 것이다. 따라서 li3에서 append를 통해 새로운 요소를 추가하게 되면 li3의 [* , * , * , * ]가 [* , * , * , * , * ]가 되어서 마지막 * 가 새로운 요소를 가르키게 된다. 따라서 li3가 변경되더라도 li는 변경되지 않는다.
하지만 여기에서도 예외는 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#얕은 복사&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li3&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#[1,2,3,[4,5]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li3&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# [1,2,3,[4,5,6]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# [1,2,3,[4,5,6]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 보면 알 수 있듯이 원래 얕은 복사에서라면 li3를 바꾼다고 해서 li가 바뀌어서는 안된다. 하지만 li는 변경되었다. 그렇다면 li3는 왜 변경되었을까? 위에 언급한대로 li3는 li의 [* , * , * , * ]를 복사해 온 것이다. 위에 예시에서 마지막 * 은 3번째 인덱스 [4,5]을 가르키고 있다. li3와 li 모두 [4,5]을 가르키고 있는 것이다. 따라서 li3를 통해 [4,5]를 변경하게 되면 마지막 *가 가르키는 것이 변경되는 것이므로 li 역시 변경되게 된다.(즉 li와 li3의 내부리스트는 각은 객체를 참조하기 떄문이다.)&lt;/p&gt;

&lt;p&gt;이러한 것을 맡기 위해서는 깊은 복사가 필요하다.&lt;/p&gt;

&lt;h3 id=&quot;깊은-복사&quot;&gt;깊은 복사&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;#deepcopy를 위해서는 copy를 import 해주어야 한다.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li4&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# [1,2,3,4]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li4&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# [1,2,3,4,5]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# [1,2,3,4]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li4&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# [1,2,3,[4,5]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li4&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# [1,2,3,[4,5,6]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# [1,2,3,[4,5]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;깊은 복사를 통해서는 완전히 동일한 새로운 객체를 생성하는 것이므로 li4에 어떤 요소를 추가해도 li는 전혀 영향을 받지 않는다. 따라서 상황에 맡게 단순 객체 복사, 얕은 복사, 깊은 복사를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;참고 : 2019_03_23_TIL(깊은 복사 얕은 복사)&lt;/p&gt;

&lt;h1 id=&quot;비선형구조&quot;&gt;비선형구조&lt;/h1&gt;

&lt;h2 id=&quot;트리&quot;&gt;트리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;connected acyclic graph
    &lt;ul&gt;
      &lt;li&gt;사이클(순환)이 없는 연결된 그래프&lt;/li&gt;
      &lt;li&gt;루트노드(root)를 반드시 가진다.&lt;/li&gt;
      &lt;li&gt;트리를 구성하는 노드 간에 단순 경로가 반드시 존재한다.
        &lt;ul&gt;
          &lt;li&gt;단순경로란 지나왔던 접점을 다시 지나지 않는 경로&lt;/li&gt;
          &lt;li&gt;한 개의 노드에서 다른 한개의 노드를 선택하면 단순 경로가 항상 존재&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;루트 노드를 제외한 나버지 노드들은 분리집합으로 분할이 가능하며 이 집합들은 각각 하나의 트리를 구성한다(재귀적 정의)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;트리-용어-정리&quot;&gt;트리 용어 정리&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;873&quot; alt=&quot;자료구조 용어 정리&quot; src=&quot;https://user-images.githubusercontent.com/46436843/56033786-3e997a00-5d60-11e9-9c2f-c46e787639b0.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;부모노드와 왼쪽 자식노드 , 오른쪽 자식노드로 나누어짐&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;루트노드 : 뒤로 뒤집어서 보면 여기서부터 쭉 퍼져나가므로 root(뿌리) 노드이다. 트리의 시작점&lt;/li&gt;
  &lt;li&gt;에지 : 노드를 연결하는 선&lt;/li&gt;
  &lt;li&gt;리프노드 : 자식노드가 하나도 없는 노드&lt;/li&gt;
  &lt;li&gt;인터널노드 : 자식노드가 하나라도 있는 노드&lt;/li&gt;
  &lt;li&gt;차수 : 자식노드의 갯수&lt;/li&gt;
  &lt;li&gt;트리의 차수 : 트리에 있는 노드들 중 최대 차수&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;이진-트리&quot;&gt;이진 트리&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;804&quot; alt=&quot;이진트리&quot; src=&quot;https://user-images.githubusercontent.com/46436843/56034021-02b2e480-5d61-11e9-9f22-b130b61fffd0.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;어떤 노드의 자식 노드의 수가 최대 2개인 트리&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;이진-트리의-종류&quot;&gt;이진 트리의 종류&lt;/h3&gt;

&lt;p&gt;&lt;img width=&quot;865&quot; alt=&quot;C9E60ED9-D5EA-4E44-9157-265B242B2B4F&quot; src=&quot;https://user-images.githubusercontent.com/46436843/56034154-7ead2c80-5d61-11e9-96d6-2298526f3b28.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;포화 이진 트리
    &lt;ul&gt;
      &lt;li&gt;모든 레벨이 꽉 차 있다.&lt;/li&gt;
      &lt;li&gt;즉 모든 노드들의 2개의 자식노드를 가지고 있다.(리프노드 제외)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;864&quot; alt=&quot;4E72888E-46D9-46B1-95B6-BE894FD21905&quot; src=&quot;https://user-images.githubusercontent.com/46436843/56034155-7fde5980-5d61-11e9-871b-29faf66adaab.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;완전 이진 트리
    &lt;ul&gt;
      &lt;li&gt;트리의 노드가 위에서 아래로, 왼쪽에서 오른쪽으로 채워지는 트리&lt;/li&gt;
      &lt;li&gt;가장 높은 레벨 단계에서 항상 왼쪽에서 오른쪽으로 채워져 있어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;트리의-순회는-다음-장에서-추가로-공부한다&quot;&gt;트리의 순회는 다음 장에서 추가로 공부한다!&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;순회란 트리의 모든 노드를 중복하지 않으면서 방문하는 것을 말하며, 데이터를 찾고, 저장하고, 삭제하는데 쓰인다.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 12 Apr 2019 03:06:23 +0900</pubDate>
        <link>http://localhost:4000/computer/2019/04/12/TIL(%E1%84%8C%E1%85%A1%E1%84%85%E1%85%AD%E1%84%80%E1%85%AE%E1%84%8C%E1%85%A9).html</link>
        <guid isPermaLink="true">http://localhost:4000/computer/2019/04/12/TIL(%E1%84%8C%E1%85%A1%E1%84%85%E1%85%AD%E1%84%80%E1%85%AE%E1%84%8C%E1%85%A9).html</guid>
        
        
        <category>computer</category>
        
      </item>
    
      <item>
        <title>2019_04_10_TIL(Git 브랜치)</title>
        <description>&lt;h3 id=&quot;20190410-til&quot;&gt;2019.04.10 TIL&lt;/h3&gt;

&lt;p&gt;(TIL은 스스로 이해한 것을 바탕으로 정리한 것으로 오류가 있을 수 있습니다)&lt;/p&gt;

&lt;p&gt;# 질문에 답하기&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;원격-저장소&quot;&gt;원격 저장소&lt;/h1&gt;

&lt;p&gt;원격 저장소는 소스코드와 버전을 백업 및 관리하고, 다른 사람과의 협업이 가능하도록 도와주는 기능이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;local repository &amp;amp; remote repository&lt;/li&gt;
  &lt;li&gt;원격저장소의 중요한 의미 2가지
    &lt;ul&gt;
      &lt;li&gt;소스코드를 백업한다.&lt;/li&gt;
      &lt;li&gt;다른사람과 협업한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;참고 : &lt;a href=&quot;https://git-scm.com/book/ko/v1/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EB%B8%8C%EB%9E%9C%EC%B9%98&quot;&gt;Git - 리모트 브랜치&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;원격-저장소를-지역-저장소로-복제&quot;&gt;원격 저장소를 지역 저장소로 복제&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;clone 명령어는 다음과 같습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git clone { 원격 저장소 URL }&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;특정 브랜치를 clone 하고 싶다면,&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git clone -b { 브랜치명 } { 원격 저장소 URL }&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;지역-저장소에서-브랜치-작업-시작&quot;&gt;지역 저장소에서 브랜치 작업 시작&lt;/h1&gt;

&lt;h2 id=&quot;현재-브랜치의-상태-확인&quot;&gt;현재 브랜치의 상태 확인&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;git branch : 지금 현재 어느 브런치로 설정되어 있는지 확인&lt;/li&gt;
  &lt;li&gt;git branch -r : remote branch 확인(원격저장소 브랜치 확인)&lt;/li&gt;
  &lt;li&gt;git branch -a : 모든 브랜치 상태 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;브랜치-생성&quot;&gt;브랜치 생성&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;git branch feat/loop&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;master 브랜치 밑에 feat/loop 브랜치 생성&lt;/li&gt;
  &lt;li&gt;확인 : git branch로 확인을 해보면 feat/loop 브랜치 생성&lt;/li&gt;
  &lt;li&gt;아직까지 remote에는 생성되지 않았다. (commit을 해줘야 생성된다.)&lt;/li&gt;
  &lt;li&gt;브랜치 생성만 해주면 github에서 인식 불가&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;브랜치-이동&quot;&gt;브랜치 이동&lt;/h2&gt;

&lt;p&gt;**git checkout &lt;브랜치 이름=&quot;&quot;&gt;**&lt;/브랜치&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git branch를 통해 실제로 이동했는지 확인한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;브랜치를-원격-저장소로-전송&quot;&gt;브랜치를 원격 저장소로 전송&lt;/h2&gt;

&lt;p&gt;git push -u origin feat/loop&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;새로운 브런치를 만들고 처음 원격 저장소로 업로드 할 때는 -u를 해줘서 업스트링 셋을 해줘야 한다.&lt;/li&gt;
  &lt;li&gt;한번만 경로 설정 이후에는 git push를 통해 진행을 해도 가능하다.
    &lt;ul&gt;
      &lt;li&gt;안해주면 10분정도 혼날 수 있는 각이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;브랜치-밑에-새로은-브랜치-생성&quot;&gt;브랜치 밑에 새로은 브랜치 생성&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout feat/loop           # 새로운 브랜치 바로 위의 브랜치로 이동
git branch feat/con-state        # 새로운 브랜치 생성
git branch                                 # 생성 확인
git checkout feat/con-state        # 새로은 브랜치로 이동
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img width=&quot;706&quot; alt=&quot;스크린샷 2019-04-10 오전 11 26 01&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55877544-3a8d2100-5bd5-11e9-9e5f-56855a3fdd94.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;merge-당긴다&quot;&gt;MERGE (당긴다)&lt;/h2&gt;

&lt;p&gt;feat/con-state를 feat/loop 로 옴기기&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;당긴다고 생각하면 좋다.&lt;/li&gt;
  &lt;li&gt;당길 곳으로 이동해서 그 당길 것을 당긴다.&lt;/li&gt;
  &lt;li&gt;feat /loop로 이동해서 feat/con-state를 당긴다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout feat/loop
git merge feat/con-state

# feat/loop 입장에서는 feat/con-state 내용이 들어온 것이므로 commit이 한개 생긴다.

git push -u origin feat/loop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img width=&quot;715&quot; alt=&quot;스크린샷 2019-04-10 오전 11 31 07&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55877582-5b557680-5bd5-11e9-9c9e-f072e898b866.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;마스터에서-merge-해주기&quot;&gt;마스터에서 merge 해주기&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout master        #마스터 브랜치로 이동
git branch                        #실제 이동 상태 확인
git merge feat/loop            # feat/loop를 마스터 브랜치로 merge
git status                            #현재 git 상태확인
git push origin master           # origin master로 전송
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img width=&quot;704&quot; alt=&quot;AC062E9B-7327-4645-8C2C-8A1DC56AC96D&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55877627-8049e980-5bd5-11e9-864c-52e4acbf9380.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;브런치-지우기&quot;&gt;브런치 지우기&lt;/h2&gt;

&lt;p&gt;우리가 실제로 작업 할 때 기능 개발이 완벽히 끝났을 때는 브랜치가 남아 있으면 안된다.&lt;/p&gt;

&lt;p&gt;**git branch -D &lt;브랜치 이름=&quot;&quot;&gt;**&lt;/브랜치&gt;&lt;/p&gt;

&lt;p&gt;우리가 개발하는 모든 부분은 DEV이라는 브런치를 따서 만들고     &lt;br /&gt;
master에는 고객들이 쓰는 상용화 된 것만 놔둔다. 우리는 항상 master를 쓸 일이 잘 있지 않을 것이다.&lt;/p&gt;

&lt;p&gt;master를 지워도 타임스탬프로 돌아가면 된다.    &lt;br /&gt;
뭔가 이유 없는 테이블은 없다. DB를 훔쳐보면 안된다.&lt;/p&gt;

&lt;h1 id=&quot;git-flow-strategy&quot;&gt;git flow strategy&lt;/h1&gt;

&lt;p&gt;&lt;img width=&quot;800&quot; alt=&quot;스크린샷 2019-04-10 오후 12 20 02&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55877819-fcdcc800-5bd5-11e9-84a8-ffa8ecfe525d.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메인 공간은 사용자만 쓰는 것으로 놔둬야 한다.&lt;/li&gt;
  &lt;li&gt;git flow를 통해서 브랜치 관리를 쉽게 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;git-flow  : &lt;a href=&quot;https://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html&quot;&gt;git-flow cheatsheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;git init 이후에 바로 git flow init 으로 git flow 도 쓸 것이라고 해준다.&lt;/li&gt;
  &lt;li&gt;git flow init을 설정까지 하고 나면 develop가 알아서 생성되고 들어가준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;800&quot; alt=&quot;스크린샷 2019-04-10 오후 12 20 32&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55877823-fe0df500-5bd5-11e9-9c37-1b44c042a634.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git flow init 이후에 feature,release,hotfix 각각에 start/ finish / publish/ pull 사용 가능&lt;/li&gt;
  &lt;li&gt;git flow feature start &lt;이름&gt;  ==&amp;gt; 해당 브런치를 생성해주고 해당 브랜치로 이동까지 해준다.&lt;/이름&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;release란&quot;&gt;release란?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;배포를 위한 버전 관리&lt;/li&gt;
  &lt;li&gt;git flow release start/finish/publish/pull 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;v.0.0.1.00190410001&lt;/p&gt;

&lt;p&gt;릴리즈 피니시를 하면 merge에 관한 것 1개와  release 작업 물에 대한 태그를 달 수 있는 2개가 나온다.&lt;/p&gt;

&lt;p&gt;릴리즈 절차를 끝내면 마스터와 develop에 commit이 남는다.  &lt;br /&gt;
github에서 확인하기 위해서는 마스터 및 develop에서 push 해줘야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;614&quot; alt=&quot;89512A50-75B9-4255-BEEB-EF7AAB1C7277&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55878085-af148f80-5bd6-11e9-967f-6ca2bf1460d4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/ihoneymon/a28138ee5309c73e94f9&quot;&gt;git 을 기반으로 git-flow를 사용하여 애플리케이션 배포버전을 관리하자.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-clone-pull-fetch의-차이&quot;&gt;git clone, pull, fetch의 차이&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;이해하기에 좋은 글이 있어서 그대로 가지고 옵니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://victorydntmd.tistory.com/74&quot;&gt;[참고 : Git 개념] remote, push, clone, pull :: victolee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;git pull 명령어 역시 Github에 있는 파일들을 local로 가져오는 것입니다.   &lt;br /&gt;
git clone은 Github의 모든 파일들을 가져오기만 하는 것이고,    &lt;br /&gt;
git pull은 local repository에 저장( add )까지 되며, 현재 local repository와 비교까지 합니다.    &lt;br /&gt;
다시 말하면, git pull = git fetch + git merge 와 같습니다.   &lt;br /&gt;
git fetch는 local에 연결된 remote repository의 브랜치 목록과 그 파일 내용을 가져오는 역할, 즉 업데이트를 하는 명령어입니다.   &lt;br /&gt;
git merge는 나중에 알아볼 명령어인데, 두 개의 branch를 병합해서 하나의 코드로 만드는 명령어입니다.   &lt;br /&gt;
즉, git pull은 협업 과정에서 최신 코드로 업데이트 하는 용도로 많이 사용합니다.   &lt;br /&gt;
예를 들어, 팀 프로젝트를 진행하다가 친구가 기능 구현을 완료해서 git push를 했다고 가정해보겠습니다.   &lt;br /&gt;
저는 새로운 버전을 사용하기 위하여 Github에 있는 코드를 가져와야 하는데 어떤 방식으로 가져와야 할까요?   &lt;br /&gt;
git clone을 하면 제가 그동안 작업했던 내용들과 최신 버전의 파일은 독립된 존재가 되어버립니다.      &lt;br /&gt;
즉, clone을 해서 받은 폴더에 제가 작업했던 내용들을 일일이 수작업으로 적용시켜야 하죠.
이는 좋은 방법이 아닙니다.     &lt;br /&gt;
git pull을 하면 어떨까요?      &lt;br /&gt;
현재 제가 작업 중인 local repository와 최신 코드가 비교되고 병합되어, 최신 버전 파일들이 저의 local repository에 적용됩니다.     &lt;br /&gt;
따라서 제가 작업하고 있던 코드들과 최신 버전 파일의 코드는 함께 존재하게 되죠.      &lt;br /&gt;
즉, 제가 작업한 코드와 친구의 작업 코드가 자동으로 합쳐지게 되니까 매우 바람직합니다.     &lt;br /&gt;
그런데 만약 동일한 파일 내역을 수정했다면 어떻게 될까요?       &lt;br /&gt;
이 경우 충돌( conflicts )이 발생하며 일일이 충돌된 부분을 수정해야 합니다.      &lt;br /&gt;
이 부분은 다음 글에서 merge를 할 때 다루도록 하겠습니다.     &lt;br /&gt;
정리하자면,       &lt;br /&gt;
git clone은 완전히 새로운 프로젝트에 투입 되었을 때,     &lt;br /&gt;
git pull은 작업하면서 최신 버전을 가져올 때     &lt;br /&gt;
사용한다고 생각하시면 좋을 것 같습니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Apr 2019 03:06:23 +0900</pubDate>
        <link>http://localhost:4000/computer/2019/04/10/TIL(Git-%E1%84%87%E1%85%B3%E1%84%85%E1%85%A2%E1%86%AB%E1%84%8E%E1%85%B5).html</link>
        <guid isPermaLink="true">http://localhost:4000/computer/2019/04/10/TIL(Git-%E1%84%87%E1%85%B3%E1%84%85%E1%85%A2%E1%86%AB%E1%84%8E%E1%85%B5).html</guid>
        
        
        <category>computer</category>
        
      </item>
    
      <item>
        <title>2019_04_09_TIL(데이터 베이스&amp;MYSQL)</title>
        <description>&lt;h3 id=&quot;20190409-til&quot;&gt;2019.04.09 TIL&lt;/h3&gt;

&lt;p&gt;(TIL은 스스로 이해한 것을 바탕으로 정리한 것으로 오류가 있을 수 있습니다)&lt;/p&gt;

&lt;p&gt;# 질문에 답하기&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;데이터-베이스&quot;&gt;데이터 베이스&lt;/h1&gt;

&lt;p&gt;mysql은 관계형 데이터 베이스이다.
관계형 데이터 베이스 시스템들은 SQL 문법을 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nosql : 빅데이터와 같이 큰 데이터가 늘어나면서 관계형 데이터가 한계가 있다고 생각&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;database-server&quot;&gt;DATABASE SERVER&lt;/h2&gt;

&lt;p&gt;server이기 때문에 앞으로 들어나지 않는다.
database server밑에서 여러개의 database가 있을 수 있고
database 밑에서는 여러개의 table이 있다.
그 안에 DATABASE가 있다.&lt;/p&gt;

&lt;p&gt;database&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;oracle이 1위 회사이다.&lt;/li&gt;
  &lt;li&gt;중소기업은 mysql —&amp;gt; php와 너무 잘 맞다. APM(apach, php, mysql)&lt;/li&gt;
  &lt;li&gt;MariaDB 
django&lt;/li&gt;
  &lt;li&gt;postgreSQL —&amp;gt; open source&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;database는 table이라는 것을 카테고라이징 한 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;table은 entity 혹은 relation이라고 부른다.&lt;/li&gt;
  &lt;li&gt;열은 column 혹은 field라고 부른다.&lt;/li&gt;
  &lt;li&gt;행은 row 혹은 tuple이라고 부른다.(파이썬의 자료형 tuple과 동일하다)&lt;/li&gt;
  &lt;li&gt;또한 이 row 한 줄을 recode라고 한다.&lt;/li&gt;
  &lt;li&gt;레코드는 구체적인 데이터를 이야기한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;기본적으로-행과-열을-통해서-데이터베이스에-접근한다&quot;&gt;기본적으로 행과 열을 통해서 데이터베이스에 접근한다.&lt;/h3&gt;

&lt;h2 id=&quot;database-client&quot;&gt;DATABASE CLIENT&lt;/h2&gt;

&lt;p&gt;mysql-client
phpmyadmin
mysql query browser
navicat&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;참고사항&lt;/li&gt;
  &lt;li&gt;utf-8 mb4 (unicode utf-8)의 의미
    &lt;ul&gt;
      &lt;li&gt;a,b,c —&amp;gt; 1byte&lt;/li&gt;
      &lt;li&gt;한글 —&amp;gt; 3byte&lt;/li&gt;
      &lt;li&gt;어차피 3바이트까지 하면 되는데 굳이 4바이트까지 써야하나?&lt;/li&gt;
      &lt;li&gt;따라서 자체적으로 3바이트로 만들었는데&lt;/li&gt;
      &lt;li&gt;이모티콘이 나오면서 4바이트로 바꿈(utf-8 mb4)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;시작하기&quot;&gt;시작하기&lt;/h2&gt;

&lt;p&gt;students&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;student ID - int, primary key(테이블에서 오직 하나)&lt;/li&gt;
  &lt;li&gt;height&lt;/li&gt;
  &lt;li&gt;score&lt;/li&gt;
  &lt;li&gt;birthday&lt;/li&gt;
  &lt;li&gt;class ID - int, NULL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;teacher&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;teacher - int, primary key&lt;/li&gt;
  &lt;li&gt;subject - varchar(가변)/ not null&lt;/li&gt;
  &lt;li&gt;class id - int, NULL&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;server-start&quot;&gt;server start&lt;/h3&gt;

&lt;p&gt;mysql.server start
mysql -u root&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mysql -u root  ===&amp;gt; connection이 연결 TCP 연결(socket으로 연결이 둟린 것이다.)&lt;/li&gt;
  &lt;li&gt;이것을 session이라고 한다. TCP 연결을 했다.&lt;/li&gt;
  &lt;li&gt;client는 여려명일 수 있다. john, greg 등&lt;/li&gt;
  &lt;li&gt;쓰레드의 가장 큰 문제점 : 레이스 컨디션
    &lt;ul&gt;
      &lt;li&gt;여러명이 접속하게 되면 table이 shared resource가 된다. (공유자원)&lt;/li&gt;
      &lt;li&gt;updata문을 통해서 balance 값을 5000원에서 3000원으로 바꾸면서 끊김&lt;/li&gt;
      &lt;li&gt;무결점을 보장해줘야한다.&lt;/li&gt;
      &lt;li&gt;그렇기 때문에 session을 연 다음에 update를 하는 순간 그 쓰레드에 대해서만 복사해서 준다.&lt;/li&gt;
      &lt;li&gt;트랜젝션을 업데이트를 한 다음에 commit을 통해 트랜젝션을 끝내고 데이터 베이스를 바꿈.&lt;/li&gt;
      &lt;li&gt;commit전에는 절대 데이터 베이스는 바뀌지 않는다. 무결성&lt;/li&gt;
      &lt;li&gt;트랜젝션과 세션의 차이를 잘 알아야 한다.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://books.google.co.kr/books?id=-mp0DwAAQBAJ&amp;amp;pg=PA290&amp;amp;lpg=PA290&amp;amp;dq=%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EA%B3%BC+%EC%84%B8%EC%85%98&amp;amp;source=bl&amp;amp;ots=DTiZRpADIB&amp;amp;sig=ACfU3U2S1uYOtg0yxfIBuevMT8Yke0E13g&amp;amp;hl=ko&amp;amp;sa=X&amp;amp;ved=2ahUKEwj4qaPWgsPhAhVHzbwKHcwbAYIQ6AEwBnoECAgQAQ#v=onepage&amp;amp;q=%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EA%B3%BC%20%EC%84%B8%EC%85%98&amp;amp;f=false&quot;&gt;Do it! 오라클로 배우는 데이터베이스 입문 - 이지훈 - Google 도서&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;유저확인&quot;&gt;유저확인&lt;/h3&gt;

&lt;p&gt;SELECT USER, HOST FROM USERS;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;유저-생성-및-비밀번호-설정&quot;&gt;유저 생성 및 비밀번호 설정&lt;/h3&gt;

&lt;p&gt;CREATE USER “byeonguk”@“localhost” IDENTIFIED BY “1234”;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;권한-주기&quot;&gt;권한 주기&lt;/h3&gt;

&lt;p&gt;GRANT ALL PRIVILEGES ON *.* TO “byeonguk”@”localhost” with grant option;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;권한-적용&quot;&gt;권한 적용&lt;/h3&gt;

&lt;p&gt;FLUSH privileges&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;권한-확인&quot;&gt;권한 확인&lt;/h3&gt;

&lt;p&gt;SELECT USER, HOST, SUPER_PRIV FROM MySQL.USER;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;데이터-삭제-혹은-테이블-삭제&quot;&gt;데이터 삭제 혹은 테이블 삭제&lt;/h3&gt;

&lt;p&gt;DROP DATABASE mydb;      &lt;br /&gt;
DROP TABLE 테이블명&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;테이블에-대한-정보-확인&quot;&gt;테이블에 대한 정보 확인&lt;/h3&gt;

&lt;p&gt;SHOW tables&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;테이블 리스트 확인
SHOW CREATE table “테이블 명”&lt;/li&gt;
  &lt;li&gt;해당 테이블에 대한 정보
DESC “테이블 명”;&lt;/li&gt;
  &lt;li&gt;해당 테이블 스키마 열람&lt;/li&gt;
  &lt;li&gt;스키마란 : 테이블에 적재될 데이터의 구조와 형식을 정의 하는 것
SELECT * FROM “테이블명”&lt;/li&gt;
  &lt;li&gt;우리가 찾던 그 정보확인&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;테이블-생성&quot;&gt;테이블 생성&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE students(
-&amp;gt; student ID INT AUTO_INCREMENT, 
-&amp;gt; studentName VARCHAR(20)  #학생의 이름이 20바이트까지 가능
-&amp;gt; height SMALLINT DEFAULT 200,
-&amp;gt; score, SMALLINT NULL,
-&amp;gt; birtyday DATE NOT NULL,
-&amp;gt; classID INT NULL,
-&amp;gt; PRIMARY KEY(studentID),                    # 오직 한개만 있다
-&amp;gt; FOREIGN KEY(classID), REFERENCES classes(classID) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;classID라는 외래키 참조하는데 classes 열에서 classID를 참조한다.&lt;/li&gt;
  &lt;li&gt;잘못되었을 때 \c를 하면 빠져나올 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE teachers (
-&amp;gt;teacherID INT AUTO_INCREMENT NOT NULL,
-&amp;gt;subject VARCHAR(30) UNIQUE,
-&amp;gt;classID INT NULL,
-&amp;gt;PRIMARY KEY(teacherID),
-&amp;gt;CONSTRAINT fk_classID
-&amp;gt;FOREIGN KEY (clastsID) REFERENCES classes (classID)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;데이터-삽입&quot;&gt;데이터 삽입&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSERT INTO students 
-&amp;gt; (studentName, height, scores, birthday, classID)
-&amp;gt; VALUES
-&amp;gt; (‘GREG’, 180, 87, ‘2002-3-23’, 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;칼럼열더하기&quot;&gt;칼럼(열)더하기&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DESC teacher;        #직관적으로 현 상황을 볼 수 있음

ALTER TABLE teachers
-&amp;gt; ADD COLUMN teacherName ;

SHOW CREATE TABLE teacher;          #해당 테이블에 대한 정보 제공(create할 때의 정보)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;백업하기&quot;&gt;백업하기&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysqldump -u root -p —databases 
mydb &amp;gt; mydb1.sql
#mydb1.sql이 생김

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;카피하기&quot;&gt;카피하기&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE student_cp
-&amp;gt; (SELECT * FROM students); 

SELECT * FROM student_cp  #잘 복사되었는지 확인
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;데이터-업데이트하기&quot;&gt;데이터 업데이트하기&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UPDATA student_cp
-&amp;gt; SET score = 100
-&amp;gt; WHERE studentName = ‘Mary’;             #Mary를 해주지 않으면 전부 다 100으로
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;메리-점수만-확인하기&quot;&gt;메리 점수만 확인하기&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT studentName, score FROM student_cp
-&amp;gt;WHERE studentName like ‘Mary’;
# WHERE studentName like &quot;Ma%&quot;; 
# %는 어떤 글자든지 다 소화시켜준다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;데이터-베이스에-조건문-넣기-50점-이상-70점-이하-점수-보기&quot;&gt;데이터 베이스에 조건문 넣기 (50점 이상 70점 이하 점수 보기)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT studentName, score
-&amp;gt; FROM student_cp
-&amp;gt; WHERE score &amp;gt; 50 and score &amp;lt; 70
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;특정-데이터-지우기&quot;&gt;특정 데이터 지우기&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Delete from student_cp
-&amp;gt; WHERE studentName like “Mary’;

SELECT * FROM student_cp (확인)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;foreinkey-없애기&quot;&gt;foreinkey 없애기&lt;/h3&gt;

&lt;p&gt;foreinkey를 없애려면
자동으로 인덱스를 잡기 때문에&lt;/p&gt;

&lt;p&gt;폴인키 제약조건을 없앤 다음에 쇼 인덱스를 해준 다음에 잡혀있는 인덱스를 없애준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1)
ALTER TABLE teachers
-&amp;gt; DROP FOREIGN KEY teachers;

2)
DROP INDEX classID
-&amp;gt; ON teachers;

SHOW CREATE TABLE teachers      #확인
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;join&quot;&gt;JOIN&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;785&quot; alt=&quot;innerouter&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55801437-0c460d80-5b11-11e9-8b1c-1a6a9ad186bd.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;join은 테이블을 가로로 연결할 때 쓴다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;inner join&lt;/li&gt;
  &lt;li&gt;outer join
    &lt;ul&gt;
      &lt;li&gt;left outer join&lt;/li&gt;
      &lt;li&gt;right outer join&lt;/li&gt;
      &lt;li&gt;full outer join
        &lt;ul&gt;
          &lt;li&gt;mysql, mariadb는 full outer을 지원하지 않는다.&lt;/li&gt;
          &lt;li&gt;필요할 때 union을 통해 구현한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.naver.com/PostView.nhn?blogId=parkjy76&amp;amp;logNo=220784188333&amp;amp;parentCategoryNo=&amp;amp;categoryNo=66&amp;amp;viewDate=&amp;amp;isShowPopularPosts=true&amp;amp;from=search&quot;&gt;MySQL full outer join : 네이버 블로그&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;inner-join&quot;&gt;INNER JOIN&lt;/h3&gt;

&lt;p&gt;ex) join 예시
student name / score / class id / teacher name / subject
 ==&amp;gt; class id로 묶는다.( class id에 대한 교집합)&lt;/p&gt;

&lt;p&gt;NULL을 어떻게 처리할 것인가?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;inner은 빠진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;if select studentname, classid, teacher 이렇게 하면 classid가 누구것인지 알수가 없다.&lt;/p&gt;

&lt;p&gt;S.를 붙여 student 표현 T.를 붙여 teacher 을 표현&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;적용 방법
    &lt;ul&gt;
      &lt;li&gt;SELECT S.studentsName,S.score, S.classID, T.teacherName, T.subject&lt;/li&gt;
      &lt;li&gt;FROM students S INNER JOIN teachers T  (student가 left teacher가 right)&lt;/li&gt;
      &lt;li&gt;ON S.classID = T.classID&lt;/li&gt;
      &lt;li&gt;ORDER BY S.classID&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;left-outer-join--왼쪽에-위치한-집합은-다-나온다&quot;&gt;LEFT OUTER JOIN ( 왼쪽에 위치한 집합은 다 나온다.)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT S.studentName, S.score, S.classID,
    -&amp;gt; T.teacherName, T.subject
    -&amp;gt; FROM students S LEFT OUTER JOIN teachers T
    -&amp;gt; ON S.classID = T.classID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;right-outer-join-오른쪽에-위치한-집합은-다-나온다&quot;&gt;RIGHT OUTER JOIN (오른쪽에 위치한 집합은 다 나온다.)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT S.studentName, S.score, S.classID
    -&amp;gt; T.teacherName, T.subject
    -&amp;gt; FROM students S RIGHT OUTER JOIN teachers T
    -&amp;gt; ON S.classID = T.classID;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;full-outer-join&quot;&gt;FULL OUTER JOIN&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT S.studentName, S.score, S.classID
    -&amp;gt; T.teacherName, T.subject
    -&amp;gt; FROM students S LEFT OUTER JOIN teachers T
    -&amp;gt; ON S.classID = T.classID
    -&amp;gt; UNION
    -&amp;gt; SELECT S.studentName, S.score, S.classID
    -&amp;gt; T.teacherName, T.subject
    -&amp;gt; FROM students S RIGHT OUTER JOIN teachers T
    -&amp;gt; ON S.classID = T.classID;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;group-by&quot;&gt;GROUP BY&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;전체 평균
    &lt;ul&gt;
      &lt;li&gt;SELECT AVG(score) FROM students;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;반별로 평균을 알고 싶다.
    &lt;ul&gt;
      &lt;li&gt;SELECT classID, AVG(score)&lt;/li&gt;
      &lt;li&gt;-&amp;gt; FROM students&lt;/li&gt;
      &lt;li&gt;-&amp;gt; GROUP BY classID&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;만약에 반 배정 안 받는 애들은 빼고 싶다.
    &lt;ul&gt;
      &lt;li&gt;SELECT classID, AVG(score)&lt;/li&gt;
      &lt;li&gt;-&amp;gt; FROM students&lt;/li&gt;
      &lt;li&gt;-&amp;gt; WHERE classID IS NOT NULL&lt;/li&gt;
      &lt;li&gt;-&amp;gt; GROUP BY classID;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;평균 65점 이상인 반을 본다.
    &lt;ul&gt;
      &lt;li&gt;SELECT classID, AVG(score)&lt;/li&gt;
      &lt;li&gt;-&amp;gt; FROM students&lt;/li&gt;
      &lt;li&gt;-&amp;gt; WHERE classID IS NOT NULL&lt;/li&gt;
      &lt;li&gt;-&amp;gt; GROUP BY classID&lt;/li&gt;
      &lt;li&gt;-&amp;gt; HAVING AVG(scores) &amp;gt; 65;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;where-와-group-by-having&quot;&gt;WHERE 와 GROUP BY, HAVING&lt;/h3&gt;

&lt;p&gt;WHERE와 ==&amp;gt; 그룹을 하기 전에 조건절 수행      &lt;br /&gt;
GROUP BY       &lt;br /&gt;
HAVING의 차이 ==&amp;gt; 이미 그룹바이로 그룹이 끝난 이후에 조건절 수행(반듯이 그룹을 한 것에 대해서만 조건절을 수행한다)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;m--n&quot;&gt;M : N&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;INNER JOIN을 2개 사용한다.
ex) Student와 subject와의 관계&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;VARCHAR 와 CHAR의 차이 : 비트를 고정해줄 것인가? 아니면 유동적으로 할 것이냐?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE subjects(
    -&amp;gt; subjectName CHAR(20) UNIQUE NOT NULL,     #unique not null은 프라이머리 key가 없으면 생성한다.
    -&amp;gt; roomNum TINYINT NOT NULL);
INSERT INTO subjects 
(subjectName, roomNum) 
VALUES ('math', 101), ('literature', 105), 
('science', 107), ('english', 110), ('ethics', 111);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;학생-입장에서-subject-name--강의실-번호까지&quot;&gt;학생 입장에서 subject name + 강의실 번호까지&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sql&amp;gt; SELECT ST.studentName, ST.score, 
SB.subjectName, SB.roomNum
FROM students ST INNER JOIN student_subject SS
ON ST.studentName=SS.studentName
INNER JOIN subjects SB
ON SS.subjectName=SB.subjectName
ORDER BY ST.studentName;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;과목-입장에서-배열&quot;&gt;과목 입장에서 배열&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sql&amp;gt; SELECT SB.subjectName, SB.roomNum, 
ST.studentName, ST.score 
FROM students ST INNER JOIN student_subject SS 
ON ST.studentName=SS.studentName 
INNER JOIN subjects SB 
ON SS.subjectName=SB.subjectName 
ORDER BY SB.subjectName;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SELECT의 순서가 바뀌는 것은 크게 의미가 없고
마지막에 ORDER BY에 따라서 정렬 순서를 정해준다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;sql&quot;&gt;SQL&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;VIEW&lt;/li&gt;
  &lt;li&gt;INDEX
    &lt;ul&gt;
      &lt;li&gt;CLUSTERED INDEX&lt;/li&gt;
      &lt;li&gt;SECONDARY INDEX&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;view&quot;&gt;VIEW&lt;/h3&gt;
&lt;p&gt;VIEW는 select문이다.   &lt;br /&gt;
view를 마치 테이블처럼 사용한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;view는 select문일 뿐이지 테이블이 새로 만들어지는 것이 아니다.&lt;/li&gt;
  &lt;li&gt;가독성이 높아진다.&lt;/li&gt;
  &lt;li&gt;보안문제 해결&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ex) 쇼핑몰   &lt;br /&gt;
customer / 생년 월일 /&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;알바생에서 customer 테이블을 그대로 보여주면 안되니깐 view(생년월일이 없는)를 하나 만들고 권한을 부여(GRANT)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;create-view&quot;&gt;CREATE VIEW&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE VIEW view_st_sb_join 
AS 
SELECT ST.studentName, ST.score,
SB.subjectName, SB.roomNum  
FROM students ST INNER JOIN student_subject SS 
ON ST.studentName=SS.studentName 
INNER JOIN subjects SB 
ON SS.subjectName=SB.subjectName 
ORDER BY ST.studentName;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;where-적용-가능&quot;&gt;WHERE 적용 가능&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM view_st_sb_join;

sql&amp;gt; SELECT * FROM view_st_sb_join 
WHERE score BETWEEN 50 AND 70;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;drop-view-적용-가능&quot;&gt;DROP VIEW 적용 가능&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DROP VIEW view_st_sb_join;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;index&quot;&gt;INDEX&lt;/h3&gt;

&lt;p&gt;index를 쓰는 이유 &amp;lt;– 데이터 검색&lt;/p&gt;

&lt;p&gt;Tree BST –&amp;gt; o(log n)   &lt;br /&gt;
단점 보완 -&amp;gt; red - black - tree (균형 이진 트리)  추가  단점 보완 =&amp;gt; B-tree&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CLUSTERED INDEX
    &lt;ul&gt;
      &lt;li&gt;한 테이블마다 1개씩만 존재한다.&lt;/li&gt;
      &lt;li&gt;데이터 자체를 클러스트 인덱스에 맞추어서 정렬한다.&lt;/li&gt;
      &lt;li&gt;primary key가 클러스트 인덱스가 된다.&lt;/li&gt;
      &lt;li&gt;primary key를 안 잡고 데이터를 넣은 뒤 primary key를 잡으면 나중에 굉장히 정렬하는 시간이 오래 걸릴 수 있다. ==&amp;gt; 항상 미리 잡고 시작하자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SECONDARY INDEX
    &lt;ul&gt;
      &lt;li&gt;원하는만큼 붙일 수 있다.&lt;/li&gt;
      &lt;li&gt;B-트리라는 자료구조를 만들고 실제 데이터를 참조해서 만든다.
        &lt;ul&gt;
          &lt;li&gt;where 에 쓰인다. ex) where classID = 3&lt;/li&gt;
          &lt;li&gt;secondary index를 언제만드냐?
            &lt;ul&gt;
              &lt;li&gt;where가 자주 쓰일 때 만들어 놓으면 search를 할 때 secondary index를 활용하여 서치&lt;/li&gt;
              &lt;li&gt;쓰는 이유 : 검색 속도가 엄청나게 빨라진다.&lt;/li&gt;
              &lt;li&gt;단점 : 테이블에 대해 insert를 계속하고 업데이트를 계속한다고 하면 계속 B-tree도 업데이트 시켜줘야하고, 수정, 삽입 등이 많이 늘어나면 페이지 분할이 일어나서 속도가 늦어질 수 있다.&lt;/li&gt;
              &lt;li&gt;where을 내가 얼마나 쓸 것인지 파악하고, 내가 수정 삽입 등을 얼마나 할 것인지 고민&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;CREATE INDEX는 secondary index만 만들 수 있다.&lt;/li&gt;
      &lt;li&gt;cluster  int를 만들기 위해서는 ALTER TABLE이라는 커맨드를 써야한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;참고사항&quot;&gt;참고사항&lt;/h4&gt;

&lt;p&gt;내부 스키마 외부 스키마 개념 스키마
&lt;a href=&quot;https://coding-factory.tistory.com/216&quot;&gt;[DB기초] 스키마란 무엇인가?&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Apr 2019 03:06:23 +0900</pubDate>
        <link>http://localhost:4000/computer/2019/04/09/TIL(%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5-%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-&-MYSQL).html</link>
        <guid isPermaLink="true">http://localhost:4000/computer/2019/04/09/TIL(%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5-%E1%84%87%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3-&-MYSQL).html</guid>
        
        
        <category>computer</category>
        
      </item>
    
      <item>
        <title>2019_04_06_TIL(네트워크의 큰 그림)</title>
        <description>&lt;h3 id=&quot;20190406-til&quot;&gt;2019.04.06 TIL&lt;/h3&gt;

&lt;p&gt;(TIL은 스스로 이해한 것을 바탕으로 정리한 것으로 오류가 있을 수 있습니다)&lt;/p&gt;

&lt;p&gt;# 질문에 답하기&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;네트워크의 큰 그림에 대해 이야기 해보기&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;들어가기&quot;&gt;들어가기&lt;/h1&gt;

&lt;p&gt;나만 가지고 있는 데이터는 크게 의미가 없다. 
우리는 서로의 데이터를 공유할 때 그 효과는 극대화 된다.&lt;/p&gt;

&lt;p&gt;이러한 것을 실현 시켜주는 것이 네트워크이다. net + work 라는 글에서 알 수 있듯이
우리가 가진 데이터들을 공유시킬 수 있는 망이다.&lt;/p&gt;

&lt;p&gt;인터넷은 international network 라는 말의 줄인말이며 네트워크의 네트워크라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;이렇게 규모가 커진 인터넷을 관리하기 위해서는 여러가지 규약들이 필요하게 되었다.
즉 network간의 데이터를 교환하기 위한 규약이 생기게 된 것이다. 이를 프로토콜이라고 한다.&lt;/p&gt;

&lt;p&gt;이 프토토콜을 기능별로 나누어 OSI 7계층 혹은 TCP/IP로 부른다.
이렇게 계층화를 시킴으로서 통신에 문제가 발생하였을 때 어디서 발생했는지 찾기가 쉬워지고,
데이터의 흐름을 알 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;TCP/IP 4계층으로 네트워크의 큰 그림을 그려보고자 한다.
기본적으로 우리는 client / server 그리고 중간에서 통신을 도와주는 라우터로 나눌 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;네트워크&quot;&gt;네트워크&lt;/h1&gt;

&lt;p&gt;&lt;img width=&quot;989&quot; alt=&quot;network&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55669912-f4278180-58b7-11e9-88b3-d71abc9480ee.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림은 내가 일단 네트워크를 정리한 큰 그림이다.(4계층으로 정리)&lt;/p&gt;

&lt;p&gt;각각의 상세 기능에 대한 설명은 뒤로 하고 이번에는 먼저 큰 것들에 대해 설명해보고자 한다.&lt;/p&gt;

&lt;h2 id=&quot;network-interface파랑&quot;&gt;network interface(파랑)&lt;/h2&gt;
&lt;p&gt;먼저 client(우리 노트북)에서 우리가 속해 있는 LAN(local area network) 범위 즉 라우터 (IPTime 으로 생각해도 좋다)까지 먼저 데이터를 전송해야 한다. 그 가장 기본이 되는 것이 &lt;strong&gt;네트워크 인터페이스(파란색)&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;네트워크 인터페이스에서 &lt;strong&gt;NIC(network interface controller)&lt;/strong&gt;는 컴퓨터에 설치되어 네트워크와 연결하기 위한 장치로 흔히 우리가 말하는 랜카드이다. 그리고 이 NIC가 가지고 있는 하드웨어 주소를 &lt;strong&gt;MAC주소&lt;/strong&gt;이라고 한다. 이런 LAN사이의 통신은 이더넷프로토콜이 책임이며 &lt;strong&gt;MTU(maximum transmission unit)&lt;/strong&gt;는 한번에 보낼 수 있는 최대 데이터 양으로 약 1500byte정도 된다.&lt;/p&gt;

&lt;h2 id=&quot;internet빨강&quot;&gt;internet(빨강)&lt;/h2&gt;
&lt;p&gt;다음으로는 우리가 많이 부르는 &lt;strong&gt;IP&lt;/strong&gt;에 관한 내용이다. 각각의 라우터는 ISP(internet service provider)로 부터 &lt;strong&gt;공인 IP&lt;/strong&gt;를 부여받는다. 이 IP는 ipv4 버전으로 4byte로 표현된다.(2진법)  이것을 10진법으로 바꾸어 192.168.142.68 처럼 IP주소가 된다. 라우터를 통해 라우터에 접속되어 있는 client들은 &lt;strong&gt;사설 IP&lt;/strong&gt;를 부여 받게 되고 각각의 client들의 사설 IP와 MAC Address를 일치 시키기 위해 &lt;strong&gt;ARP(address resoultion protocol)&lt;/strong&gt;을 따른다. 이는 브로드캐스팅(모두에서 ping을 쏘아 회신을 받는다) 방법을 통해 접속해 있는 모든 client들의 MAC주소를 사설 IP주소와 묶어 하나의 table로 만든다. &lt;br /&gt;
그리고 좀 더 효율적인 관리를 위해 &lt;strong&gt;서브넷 마스크&lt;/strong&gt;를 도입하여 IP의 낭비를 막는다.
또한 client의 사설 IP주소가 라우터로 왔을 때 사설 IP주소로는 그 이후로는 더 전달할 수 없으므로 이 사설 IP주소와 라우터가 가지고 있는 공인 IP주소를 바인드하는데 이를 &lt;strong&gt;NAT(network address translation)&lt;/strong&gt;라고 한다. 하지만 하나의 공인 IP주소와 하나의 사설 IP주소를 바인딩하는 것은 1개 혹은 2개 밖에 바인딩하지 못해 다른 client들의 접근이 제한되므로 &lt;strong&gt;NART(network address port translation)&lt;/strong&gt;방법을 통해 각각의 IP주소 뒤에 port번호를 추가한다. &lt;br /&gt;
보통 미국에 있는 서버에 접속하기까지 10개 이상의 라우터들을 거쳐야 하는데 어떤 라우터들을 거쳐서 갈지를 결정하는 알고리즘이 &lt;strong&gt;IP routing&lt;/strong&gt;이라고 한다.(router는 hop이라고도 부른다) 한번 다녀간 다음에는 route table에 맵핑을 해놓는다.&lt;/p&gt;

&lt;h2 id=&quot;transport초록&quot;&gt;transport(초록)&lt;/h2&gt;
&lt;p&gt;client에서 라우터 혹은 라우터에서 서버로 접속할 때는 데이터의 &lt;strong&gt;transport&lt;/strong&gt;가 일어나게 된다. 데이터 전송법은 크게 2가지가 존재한다. 한개는 &lt;strong&gt;TCP(transmission control protocol)&lt;/strong&gt; 또 한개는 &lt;strong&gt;UDP(user datagram protocol)&lt;/strong&gt;이다. 
이 TCP는 신뢰성에 집중하여 유실 될수도 있는 부분을 검출 해내어 재전송하고 순차적으로 전송하며(따라서 느리다), UDP는 신뢰성보다는 빠른 전송에 집중하여 데이터를 전송한다. 보통 스트리밍 혹은 게임등에 데이터 전송에 사용된다. 
TCP는 먼저 서로의 연결을 완료한 뒤( &lt;strong&gt;three way handshaking&lt;/strong&gt; 방법 사용) 연결이 끝나면 데이터를 전송한다.(&lt;strong&gt;sliding  - window&lt;/strong&gt;  방법 사용)&lt;/p&gt;

&lt;h2 id=&quot;application분홍&quot;&gt;application(분홍)&lt;/h2&gt;
&lt;p&gt;그럼 이러한 모든 과정이 일어나는 곳은 어디일까? 바로 &lt;strong&gt;application&lt;/strong&gt;이다. application을 통해 우리는 직접적으로 상호작용한다. 우리가 자주 이용하는 크롬 혹은 익스플로러가 될 수도 있고, &lt;strong&gt;HTTP, SSH, DNS&lt;/strong&gt; 등이 될 수도 있다.&lt;/p&gt;

&lt;h4 id=&quot;전체적인-그림을-나름-많은-자료를-바탕으로-그려보았으나-이렇게-설명해놓은-곳은-없어서-걱정스럽기도-하다-하지만-일단-지식을-내-머리속에-넣어야-하기-때문에-하나의-틀로-만들어보았다-앞으로-공부해가며-틀린-부분이-있으며-수정해야겠다-추가적으로-각-내용들의-상세부분은-따로-한번-더-정리할-예정이다&quot;&gt;전체적인 그림을 나름 많은 자료를 바탕으로 그려보았으나, 이렇게 설명해놓은 곳은 없어서 걱정스럽기도 하다. 하지만 일단 지식을 내 머리속에 넣어야 하기 때문에 하나의 틀로 만들어보았다. 앞으로 공부해가며 틀린 부분이 있으며 수정해야겠다. 추가적으로 각 내용들의 상세부분은 따로 한번 더 정리할 예정이다.&lt;/h4&gt;

</description>
        <pubDate>Sat, 06 Apr 2019 03:06:23 +0900</pubDate>
        <link>http://localhost:4000/computer/2019/04/06/TIL(%E1%84%82%E1%85%A6%E1%84%90%E1%85%B3%E1%84%8B%E1%85%AF%E1%84%8F%E1%85%B3%E1%84%8B%E1%85%B4-%E1%84%8F%E1%85%B3%E1%86%AB-%E1%84%80%E1%85%B3%E1%84%85%E1%85%B5%E1%86%B7).html</link>
        <guid isPermaLink="true">http://localhost:4000/computer/2019/04/06/TIL(%E1%84%82%E1%85%A6%E1%84%90%E1%85%B3%E1%84%8B%E1%85%AF%E1%84%8F%E1%85%B3%E1%84%8B%E1%85%B4-%E1%84%8F%E1%85%B3%E1%86%AB-%E1%84%80%E1%85%B3%E1%84%85%E1%85%B5%E1%86%B7).html</guid>
        
        
        <category>computer</category>
        
      </item>
    
      <item>
        <title>2019_04_04_TIL(GIT 한번에 이해하기)</title>
        <description>&lt;h3 id=&quot;20190404-til&quot;&gt;2019.04.04 TIL&lt;/h3&gt;

&lt;p&gt;(TIL은 스스로 이해한 것을 바탕으로 정리한 것으로 오류가 있을 수 있습니다)&lt;/p&gt;

&lt;p&gt;# 질문에 답하기&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;깃의 흐름에 대해 이야기해보세요&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img width=&quot;958&quot; alt=&quot;git process&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55529768-e1f1eb80-56dd-11e9-9e0c-b010caffe33d.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;알면 좋은 것
    &lt;ul&gt;
      &lt;li&gt;깃허브 - 깃을 기반으로한 소스코드 버전관리&lt;/li&gt;
      &lt;li&gt;빅버킷 - 5인 이하의 팀에서 비공개 저장소가 무료&lt;/li&gt;
      &lt;li&gt;깃랩 - 로컬에 사설 저장소를 만들고 이용할 수 있도록 해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;목적--git-remote에-보내기-위해--송장을-완성한다&quot;&gt;목적 : git remote에 보내기 위해  송장을 완성한다.&lt;/h1&gt;

&lt;h2 id=&quot;git-init--택배-부치기로-마음-먹음&quot;&gt;git init : 택배 부치기로 마음 먹음&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;index와 local reprository가 생겨나게 된다. 내가 앞으로 git으로  버전관리를 시작하겠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;git init도 지우고 싶다고 하면 :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ls - al에서 .git이 있는 것을 지워준다.&lt;/li&gt;
  &lt;li&gt;rm -rf .git&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;무조건 상위에 있는 git을 따라가기 때문에 가장 상위에서 git을 하게 되면 난리난다. 따라서 내가 정말 관리하고 싶은 것만 해야 한다. 이 실수를 한번 했었기 때문에 절대 하면 안된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;git status — &amp;gt; 현재 깃의 상태를 확인한다.&lt;/p&gt;

&lt;p&gt;git config —global 을 했었기 때문에 등록이 되어있다.&lt;/p&gt;

&lt;h2 id=&quot;보내는-사람은-git-config로-설정해준다-한번만-해주면-자동등록되어-있다&quot;&gt;보내는 사람은 git config로 설정해준다. (한번만 해주면 자동등록되어 있다)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;git config —global user.name “byeonguk kim”&lt;/li&gt;
  &lt;li&gt;git config —global user.email gang0406@naver.com&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;받는-사람에-대한-설정은-모두-git-remote로-한다&quot;&gt;받는 사람에 대한 설정은 모두 git remote로 한다.&lt;/h2&gt;

&lt;p&gt;git remote 관련된 것들 확인 : git remote help&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;받는 사람 주소 추가 : git remote add 별명 주소&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주소가 길기 때문에 보통 origin이라는 별명을 쓴다.  오늘은 cat
git remote add 별명 주소&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;실제 주소 확인:
    &lt;ul&gt;
      &lt;li&gt;git remote get-url cat 하면 실제주소 확인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;설정된 주소 삭제:
    &lt;ul&gt;
      &lt;li&gt;git remote remove cat&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;add-택배보내기&quot;&gt;ADD 택배보내기&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;보낼 제품 고르기
    &lt;ul&gt;
      &lt;li&gt;git add hello.py&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;모든 제품 보내기
    &lt;ul&gt;
      &lt;li&gt;git add -A&lt;/li&gt;
      &lt;li&gt;git add .&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제품 잘 들어갔나 확인해보기
    &lt;ul&gt;
      &lt;li&gt;git status&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;commit-받는-사람에게-편지-첨부하기&quot;&gt;COMMIT: 받는 사람에게 편지 첨부하기&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;git commit -m “제목 : 엔터 + 내용 “&lt;/li&gt;
  &lt;li&gt;git commit —&amp;gt;vim 이 실행됨&lt;/li&gt;
  &lt;li&gt;제목 적기  (제목은 항상 클리어하게 나와야 한다- 제목만 보고도 이 당시에 무엇을 했는지 알 수 있도록 한다)
    &lt;ul&gt;
      &lt;li&gt;feat : 제목 수정&lt;/li&gt;
      &lt;li&gt;doc: 도큐먼트&lt;/li&gt;
      &lt;li&gt;fix: 파일 수정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;내용 적기  : 제목과 2줄 간격을 띄우고 내용 적기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다시 normal 모드(esc)로 가서 :wq (저장하고 나가기)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이까지 하면 local repository에 쌓이게 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일 생성 및 vim으로 바로 들어가기 : touch hello.py &amp;amp;&amp;amp; vi hello.py&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tip: 꼭 동작이 되는 것을 보내야 한다. 왜냐하면 다른 사람이 보고 이상하다고 생각할 수 있기 때문이다.
따라서 커밋을 한다는 것은 꼭 동작하는 코드를 올려줘야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;tip&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;commit에 관련해서는 &lt;br /&gt;
파이썬에서는 마지막 엘리먼트의 ,를 놔두고 쓰면 장점이 있다. &lt;br /&gt;
파이썬의 컬렉션을 쓸 때는 마지막에 ,를 붙여 놓고 쓴다.  &lt;br /&gt;
그리고 엔터를 치고 나열한다.&lt;/p&gt;

&lt;p&gt;리스트 또는 딕셔너리는&lt;/p&gt;

&lt;p&gt;li = [1,2,3,4,]가 아니라.
===&amp;gt;
li = [ 
    1,
    2,
    3,
    4,
]&lt;/p&gt;

&lt;p&gt;dic = { 
    “a” : 1,
    “b” : 2,
    “c” : 3,
    “d” : 4,
}&lt;/p&gt;

&lt;p&gt;하는게 좋다.&lt;/p&gt;

&lt;p&gt;일렬로 적어 놓으면 새롭게 지우고 새롭게 추가하게 나온다.&lt;/p&gt;

&lt;h1 id=&quot;push-우체국으로-넘겨주기온라인&quot;&gt;PUSH: 우체국으로 넘겨주기(온라인)&lt;/h1&gt;

&lt;p&gt;내가 살고 있는 우체국에 꼭 넘겨줘야한다.  &lt;br /&gt;
딱 한번만 진행하면 된다.  &lt;br /&gt;
내가 보낼려고 하는 우체국과 받는 우체국이 같다고 알려줘야 한다.&lt;/p&gt;

&lt;p&gt;git push -u origin master(깃허브의 별명을 넣어주면 된다.)&lt;/p&gt;

&lt;p&gt;한번 이후에는    &lt;br /&gt;
git push origin master (git push를 할 수 있지만 명시적으로 표시해줘야한다.)&lt;/p&gt;

&lt;p&gt;vim의 모드&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;normal — 켜자마자 나오는 모드&lt;/li&gt;
  &lt;li&gt;insert mode —&amp;gt; normal에서 i를 눌러야 한다. esc는 해제&lt;/li&gt;
  &lt;li&gt;visual mode —&amp;gt; 블록 설정 normal 에서 v를 눌러야 한다.&lt;/li&gt;
  &lt;li&gt;항상 명령은 normal에서 수행 shift + :   ==&amp;gt; 메뉴바
    &lt;ol&gt;
      &lt;li&gt;빠져나가기 :q&lt;/li&gt;
      &lt;li&gt;저장하기 : wq (저장하고 나가기)&lt;/li&gt;
      &lt;li&gt;좌우이동 : hjkl 만들기&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;이-주소지에-몇가지를-담아놓고-clone을-해오는-것반대로-우체국에서-가지고-오기&quot;&gt;이 주소지에 몇가지를 담아놓고 clone을 해오는 것(반대로 우체국에서 가지고 오기)&lt;/h1&gt;

&lt;p&gt;특정 폴더에서 git clone https://github.com/fabl1106/first-cloned-repo.git 레파지토리 주소&lt;/p&gt;

&lt;p&gt;ls -al을 해보면 깃허브에 있는 것을 로컬로 가지고 온 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;LICENSE : MIT license 자유롭게 쓰세요&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GNU GPL : gpl을 따르거나, 라이센스를 풀거나 해라.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;README.md : 생성한 페이지의 메인 페이지&lt;/p&gt;

&lt;p&gt;#Custom&lt;/p&gt;

&lt;p&gt;gitignore : 환경 설정을 한다. 무시하게 만든다. 환경 설정을 한다.&lt;/p&gt;

&lt;p&gt;vim 으로 접속하면 수정할 수 있다.&lt;/p&gt;

&lt;p&gt;hidden/          #hidden 디렉토리에 있는 모든 파일을 무시한다.
&lt;em&gt;.java            #java로 생성된 파일을 무시한다.
.DS_Store            #mac에서는 꼭 하면 좋다.
hell.&lt;/em&gt;               #hell이라는 이름으로 생성된 모든 확장자 파일을 삭제해라&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;별개의 작업은 각각의 박스에 담아서 commit을 해준다.&lt;/li&gt;
  &lt;li&gt;먼저 git add를 한개씩 해준다.&lt;/li&gt;
  &lt;li&gt;stage가 있으면 개발 커밋이 가능해진다.&lt;/li&gt;
  &lt;li&gt;local repository 오프라인 개발이 가능하게 해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;방법은 2가지이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;git init해서 commit 해놓고 나중에 repository를 만들고 commit&lt;/li&gt;
  &lt;li&gt;먼저 repository를 만들어놓고 시작한다.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 04 Apr 2019 03:06:23 +0900</pubDate>
        <link>http://localhost:4000/computer/2019/04/04/TIL(GIT-%E1%84%92%E1%85%A1%E1%86%AB%E1%84%87%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%A6-%E1%84%8B%E1%85%B5%E1%84%92%E1%85%A2%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5).html</link>
        <guid isPermaLink="true">http://localhost:4000/computer/2019/04/04/TIL(GIT-%E1%84%92%E1%85%A1%E1%86%AB%E1%84%87%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%A6-%E1%84%8B%E1%85%B5%E1%84%92%E1%85%A2%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5).html</guid>
        
        
        <category>computer</category>
        
      </item>
    
      <item>
        <title>2019_04_03_TIL(네트워크 - interface,internet)</title>
        <description>&lt;h3 id=&quot;20190403-til&quot;&gt;2019.04.03 TIL&lt;/h3&gt;

&lt;p&gt;(TIL은 스스로 이해한 것을 바탕으로 정리한 것으로 오류가 있을 수 있습니다)&lt;/p&gt;

&lt;p&gt;# 질문에 답하기&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우리가 유튜브를 볼 때 일어나는 일들에 대해 최대한 상세하게 이야기 해보기&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;네트워크의-시작&quot;&gt;네트워크의 시작&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;네트워크란 : 노드(데이터를 저장하는 공간)들이 서로를 공유할 수 있게 하는 통신망&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;컴퓨터 네트워크의 등장
    &lt;ol&gt;
      &lt;li&gt;중앙 집중형: 하나의 노드가 파괴되면 한번에 파괴될 수 있음&lt;/li&gt;
      &lt;li&gt;분산형 : 중앙 집중형의 문제 해결&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;패킷 통신 방식의 발달
    &lt;ol&gt;
      &lt;li&gt;데이터를 패킷 형태로 나누어서 전송 : 목적지에서 다시 패킹 작업을 해야함&lt;/li&gt;
      &lt;li&gt;네트워크 트래픽을 여러개의 컴퓨터가 공유할 수 있으므로 장점&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;분산 네트워크 + 패킷 통신 방식 ==&amp;gt; 인터넷의 기반&lt;/li&gt;
  &lt;li&gt;각각의 네트워크가 연결되며 인터넷의 구조를 가지게 되었다.&lt;/li&gt;
  &lt;li&gt;인터넷은 네트워크의 네트워크이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;거대한-인터넷을-연결하고-데이터를-주고-받기-위한-규약이-필요해지게-되었다&quot;&gt;거대한 인터넷을 연결하고 데이터를 주고 받기 위한 규약이 필요해지게 되었다.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;분산 네트워크 + 패킷 통신 방식&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;네트워크 구조를 유지하기 위한 프로토콜 : IP(internet Protocol)
    &lt;ol&gt;
      &lt;li&gt;네트워크에 참여한 노드를 유일하게 확인해준다.&lt;/li&gt;
      &lt;li&gt;전체 네트워크에 식별 가능한 IP주소를 부여&lt;/li&gt;
      &lt;li&gt;노드와 노드 사이에서 경로 설정을 위한 라우터가 있음&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;통신을 보장하기 위한 프로토콜 : TCP(transmission control protocol)
    &lt;ol&gt;
      &lt;li&gt;데이터는 여러 패킷조각으로 나누어 이동&lt;/li&gt;
      &lt;li&gt;패킷은 순서대로 오지 않을 수 있고, 훼손될 수 있다.
        &lt;ol&gt;
          &lt;li&gt;TCP는 패킷을 재 조립하고 재 전송을 요청하는 등 흐름을 관리한다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;osi-7계층과-tcpip&quot;&gt;OSI 7계층과 TCP/IP&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;인터넷 응용 개발을 위해 네트워크를 7계층으로 나눔&lt;/li&gt;
  &lt;li&gt;OSI 모형(Open Systems Interconnection Reference Model)은 국제표준화기구(ISO)에서 개발한 모델로, 컴퓨터 네트워크 프로토콜 디자인과 통신을 계층으로 나누어 설명한 것이다. 일반적으로OSI 7 계층 모형이라고 한다.&lt;/li&gt;
  &lt;li&gt;OSI 7계층을 통합하여 TCP/IP 4계층으로 통합&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/46436843/55473720-4cf1e280-564a-11e9-94b5-26b7fa125582.jpg&quot; alt=&quot;TCP:IP&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;osi-7계층에서-꼭-알아야-하는-것들&quot;&gt;OSI 7계층에서 꼭 알아야 하는 것들&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;응용 계층(Application Layer) : FTP, HTTP, SSH&lt;/li&gt;
  &lt;li&gt;표현 계층(Presentation Layer)&lt;/li&gt;
  &lt;li&gt;세션 계층(Session Layer)&lt;/li&gt;
  &lt;li&gt;전송 계층(Transport Layer) : TCP, UDP&lt;/li&gt;
  &lt;li&gt;네트워크 계층( Network Layer) : IP&lt;/li&gt;
  &lt;li&gt;데이터 링크 계층(Data Link Layer) : Ethernet, NIC&lt;/li&gt;
  &lt;li&gt;물리 계층(Physical Layer)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;network-interfacetcpip--mac-address를-다룬다&quot;&gt;Network interface(TCP/IP) : MAC Address를 다룬다.&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Network interface는 컴퓨터에서 internet(IP Address)까지 가는 것을 다룬다.(LAN)&lt;/li&gt;
  &lt;li&gt;물리 계층(physical Layer)&lt;/li&gt;
  &lt;li&gt;데이터 링크 계층(data link Layer)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;physical-layer&quot;&gt;Physical Layer&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;컴퓨터 2대를 연결하는 것&lt;/li&gt;
  &lt;li&gt;서로의 컴퓨터에 LAN 케이블을 연결하여 스타크래프트 접속&lt;/li&gt;
  &lt;li&gt;눈에 보이는 것을 이야기한다.&lt;/li&gt;
  &lt;li&gt;랜케이블&lt;/li&gt;
  &lt;li&gt;IPTIME
    &lt;ul&gt;
      &lt;li&gt;라우터 기능 :&lt;/li&gt;
      &lt;li&gt;스위칭 기능 : twist가 되도록 해준다. 2개의 랜을 연결하면 알아서 스위치 해준다.&lt;/li&gt;
      &lt;li&gt;리피터 기능 : 거리가 멀어지면 노이즈가 생기고 신호가 약해지므로 signal 증폭&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;data-link-layer&quot;&gt;Data link Layer&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;NIC(network interface card) : 일반적으로 랜 카드를 말하며, 네트워크 어댑터이다.&lt;/li&gt;
  &lt;li&gt;MAC(media access control)
    &lt;ul&gt;
      &lt;li&gt;NIC의 하드웨어 주소&lt;/li&gt;
      &lt;li&gt;이 세상의 모든 NIC은 모두 독자적인 MAC주소를 가진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이더넷 프로토콜(ethernet protocol) - (LAN영역을 책임진다.)
    &lt;ul&gt;
      &lt;li&gt;물리 계층(랜 케이블)과 네트워크 계층(IPTime)간의 LAN 통신을 책임진다.&lt;/li&gt;
      &lt;li&gt;Destination MAC Address : 6byte, 패킷 수신 NIC&lt;/li&gt;
      &lt;li&gt;Source MAC Address : 6byte, 패킷 송신 NIC&lt;/li&gt;
      &lt;li&gt;MTU(maximum trasmission unit) : 1500byte
        &lt;ul&gt;
          &lt;li&gt;각각 또 헤드가 붙어야 되기 때문에 application에서 붙이는 데이터는 최대 1350바이트 정도 까지 가능하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;internettcpip--ip-address를-다룬다&quot;&gt;Internet(TCP/IP) : IP address를 다룬다.&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;host에서 요청한 ip를 IPTIME(라우터)로 보내고 정보를 다시 라우터로 회신해 왔을 때&lt;/li&gt;
  &lt;li&gt;돌아온 데이터를 다시 라우터에서 host로 보낼 때 mac 주소가 필요하다.&lt;/li&gt;
  &lt;li&gt;네트워크 계층(Network Layer)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;네트워크-계층&quot;&gt;네트워크 계층&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;SK : ISP(internet service provider)
    &lt;ul&gt;
      &lt;li&gt;라우터에 공인 ip주소를 할당해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;internet은 IP address를 다루고 Network interfac는 맥 address를 다룬다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;arp-address-resolution-protocol--주소-결정-프로토콜&quot;&gt;ARP (address resolution protocol) : 주소 결정 프로토콜&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;브로드캐스트로 어떤 IP를 사용하는 호스트의 MAC 주소를 알아낸다.&lt;/li&gt;
  &lt;li&gt;브로드캐스트(모두에서 보낸다.)
    &lt;ul&gt;
      &lt;li&gt;host1과 host2는 IPTIME으로부터 사설 ip주소를 부여 받는다.&lt;/li&gt;
      &lt;li&gt;host1이 host2로 데이터를 보내고자 할 때 사설 ip주소 밖에 모른다.&lt;/li&gt;
      &lt;li&gt;따라서 먼저 패킷을 모두에게 쏜다. (패킷에는 보내는 사람의 mac address와 사설 ip주소 그리고 받는 사람의 mac address(00 00 00 00 - 모든 사람)와 사설 ip주소가 담겨있다.&lt;/li&gt;
      &lt;li&gt;만약에 받는 사람의 ip주소가 아니면 패킷을 버린다.(host3)&lt;/li&gt;
      &lt;li&gt;host2는 받는 사람의 사설 ip가 동일하므로 이것에 대한 response로 mac address를 회신해준다.&lt;/li&gt;
      &lt;li&gt;그럼 그것을 host1이 다시 받아서 다시 데이터와 함께 전송해준다.&lt;/li&gt;
      &lt;li&gt;매번 브로드캐스트 하는 과정을 매우 비효율적이므로 한번 IP주소가 mac address가 등록된 것은 ARP cache table로 담아놓는다.&lt;/li&gt;
      &lt;li&gt;ARP cache table reset -&amp;gt; ping을 활용해 같은 라우터에 연결된 모든 컴퓨터의 맥주소를 받을 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ip-프로토콜&quot;&gt;IP 프로토콜&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Source address : 내 ip주소&lt;/li&gt;
  &lt;li&gt;Destination address : 내가 data를 요청한 곳의(예 : youtube) ip주소&lt;/li&gt;
  &lt;li&gt;TTL(time to live)
    &lt;ul&gt;
      &lt;li&gt;만약에 서버가 없어졌다고 하면 언제 패킷을 버릴 것이다.&lt;/li&gt;
      &lt;li&gt;패킷은 지속적으로 돌아다닐 수 있다. 라우터를 하나 지날 때마다 TTL을 하나씩 줄임&lt;/li&gt;
      &lt;li&gt;TTL이 0이 되는 순간 도착 했는 것과 상관없이 무조건 버린다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Protocol : 몇개를 TCP. 몇개를 UDP로 할 것인가?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ipv4-ip-version-4--4byte로-ip주소-표현&quot;&gt;IPV4 (IP version 4 : 4byte로 ip주소 표현)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;기본 틀 : 1byte - 1byte - 1byte - 1byte ( 0 ~ 255, 0 ~ 255, 0 ~ 255, 0 ~ 255)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;886&quot; alt=&quot;IP class&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55488715-89820600-566b-11e9-920e-73b0e18f55ed.png&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;네트워크 주소 : 라우터 주소&lt;/li&gt;
  &lt;li&gt;Host 주소 : lan에 소속되어 있는 어떤 특정 호스트를 찾는 주소(컴퓨터)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;class A : 네트워크는 2 ** 8 승 만큼 host는 2 ** 24 까지 부여 가능 ( 초창기)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크 주소가 0으로 시작 . 뒤에는 01111111 까지 가능해서 127까지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;class B : 네트워크는 2 ** 16 승 만큼 host는 2 ** 16 까지 부여 가능 ( 네트워크가 늘어나고 있음)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크 주소가 10으로 시작&lt;/li&gt;
  &lt;li&gt;10 / 00 0000 부터 10 /11 1111 까지 (128 ~ 191까지)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;class C: 네트워크는 2 ** 24 승 만큼 host는 2 ** 8 까지 부여 가능 ( 라우터의 수가 굉장히 늘어남)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크 주소가 110으로 시작&lt;/li&gt;
  &lt;li&gt;110/0 0000 부터 110/1 1111 까지 ( 192 ~ 223)까지&lt;/li&gt;
  &lt;li&gt;host는 255가 아니라 2명을 뺴서 253개 까지 배당가능 (ping(broadcast 255)와 나 자신(0))&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;서브넷-마스크&quot;&gt;서브넷 마스크&lt;/h3&gt;

&lt;p&gt;ipv4의 공인 주소가 고갈되어 감으로서 그 속도를 늦추고 host 부분을 쪼개어 낭비되는 공인주소가 없도록 하기 위한 방법&lt;/p&gt;

&lt;p&gt;예를 들어 class C에서 host가 253명까지 가능한데 부서가 여러개로 나누어져 있다면 각 부서마다 공인 주소를 부여해줘야하는 문제가 발생할 수 있다. 이러면 공인 주소의 낭비문제가 발생한다. 따라서 host 부분을 쪼개어 최대 4개의 부서에 까지 배정할 수 있도록 함으로서 이러한 낭비를 줄이도록 한다.&lt;/p&gt;

&lt;p&gt;class C :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;host 가 253명까지 가능하나 규모가 어느정도 커지면 부서별로 따로 만들어줘야 한다. 따로 부서별로 공인 IP를 하면 되지만 비싸고 낭비이다. (회사내 총 인원 240명 / 각 부서별 60명 )&lt;/li&gt;
  &lt;li&gt;class C에 속하는 공인 IP를 하나만 쓰되 IP의 Host를 다시 쪼갠다.&lt;/li&gt;
  &lt;li&gt;host 8bit를 더 쪼갠다&lt;/li&gt;
  &lt;li&gt;ㅡ ㅡ / ㅡ ㅡ ㅡ ㅡ ㅡ ㅡ (subnet 2개 와 host 6개로 쪼갠다.)&lt;/li&gt;
  &lt;li&gt;subnet은 00 / 01/ 10/ 11 (4개 구성 가능하다)&lt;/li&gt;
  &lt;li&gt;각 나눈 subnet마다 2 ** 6만큼 host 배정가능&lt;/li&gt;
  &lt;li&gt;host 입장에서는 subnet이 몇개 나누어졌는지 알아야 한다.(서버 담당자)&lt;/li&gt;
  &lt;li&gt;subnet mast를 통해 어디까지가 호스트 주소인자 알 수 있다.&lt;/li&gt;
  &lt;li&gt;ifconfig
    &lt;ul&gt;
      &lt;li&gt;en0 inet : 201.175.122.74&lt;/li&gt;
      &lt;li&gt;subnetmask: 0xffffffc0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;서브넷 마스크 해석 방법&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;851&quot; alt=&quot;서브넷 계산&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55479599-68181e80-5659-11e9-9e63-d36907570f5f.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;201.175.122.74 (ip 주소)&lt;/li&gt;
  &lt;li&gt;1100 1001 / 1010 1111 / 0111 1010 / 0100 1010&lt;/li&gt;
  &lt;li&gt;subnetmask 0xffffffc0&lt;/li&gt;
  &lt;li&gt;255.255.255.192           (만약에 서브넷 마스크가 255.255.255.000 이면 무조건 안 나눈 것)&lt;/li&gt;
  &lt;li&gt;1111 1111 / 1111 1111/ 1111 1111/ 1100  0000&lt;/li&gt;
  &lt;li&gt;1100 1001/  1010 1111/ 0111 1010/ 0100 0000   —&amp;gt; and로 계산&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;위를 통해 나온 IP주소를 서브넷 네트워크주소이며 이것을 바탕으로 2 ** 6 명의 호스트에게 하나씩 할당한다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;201.175.122.74/26 (서브넷마스크의 1의 갯수 — 24개면 나누지 않은 것이다)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ip&quot;&gt;IP&lt;/h3&gt;

&lt;p&gt;지속적으로 ipv4의 공인 주소가 고갈되어 가면서 해결책으로 ipv6(6byte로 표현)가 나오게 되었다.  &lt;br /&gt;
하지만 일단 ipv4를 완벽히 대체하기 까지 시간이 필요했고 그 해결책으로 공인과 사설 ip주소를 할당하게 되었다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Public ip (공인 ip 주소)&lt;/li&gt;
  &lt;li&gt;Private up (사설 ip 주소)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img width=&quot;853&quot; alt=&quot;사설 IP&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55484733-fe514200-5663-11e9-92bc-2bcc6fac1f16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위에 그림에서 보는 것 처럼 현재는 모두 class C이므로 192.168.0.0 부터 192.168.255.255 까지는 즉 2 ** 8 개 까지는 따로 할당하지 않고 사설 IP로 쓸 수 있도록 해놓았다.&lt;/p&gt;

&lt;p&gt;공인 ip를 sk에서 사놓고 하나씩 배정해주는 것이다.  &lt;br /&gt;
최종적으로 ip를 관리하는 단체가 있다. 나 공인 ip 너에게 팔건데 위와 같은 부분은 팔지 않을거야.&lt;/p&gt;

&lt;p&gt;IP는 유일해야 한다. 근데 왜 장소를 바껴도 일치하냐?라는 질문에 답변을 하면 &lt;br /&gt;
사설 IP를 할당받아 사용하기 때문이다.&lt;/p&gt;

&lt;p&gt;sk에서 커피숍에 IP time을 팔고나면 NIC가 2개 들어있는데 NIC1개에 ISP를 준다. 공인 ip주소이다.   &lt;br /&gt;
NIC 1개는 private ip address를 묶어 둔다.&lt;/p&gt;

&lt;p&gt;따라서 라우터는 LAN인터페이스 하나(사설 ip)와 WAN 인터페이스(공인 ip) 1개 이렇게 2개가 묶여 있다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;731&quot; alt=&quot;router&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55487516-3444f500-5669-11e9-8701-cbf0d75dd933.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;카페에 사람들이 방문하면 라우터는 호스트들에게 192.168.0.3 / 192.168.0.4 / 이렇게 나누어서 준다.  &lt;br /&gt;
이것은 private ip라고 한다(공인 ip는 전 세계에서 유일하다). 
사설 ip는 iptime이 알아서 할당해준다. (위의 대역대 중에서 마음대로 할당해준다)&lt;/p&gt;

&lt;p&gt;private network 상에 private ip가 있다.
private ip는 DHCP(Dynamic Host configuration protocol) 가 알아서 제공해준다.&lt;/p&gt;

&lt;p&gt;커피숍에 앉아서 유튜브를 하면 나는 유튜브에 바로 접속할 수 있지만 유튜브는 불가능하다.  &lt;br /&gt;
왜냐하면 나에게는 사설IP가 없기 때문이다. &lt;br /&gt;
사설 ip를 받은 애는 반드시 유튜브에서 보낸 data가 iptime을 거쳐서 와야한다.
실제로 만약에 host가 공인 IP가 있고 그 공인 ip를 알고 있으면 미국에서 바로 내 컴퓨터로 데이터를 보낼 수 있다.&lt;/p&gt;

&lt;p&gt;우리 컴퓨터에는 개개인의 ip주소가 없고 mac주소만 있다. 
ip주소는 우리가 속해 있는 라우터에 따라 매번 바뀐다.&lt;/p&gt;

&lt;p&gt;랜 안에 속해 있는 사람끼리는 ARP를 통해서 맥주소를 알 수 있지만 유튜브에서 나를 특정해서 보낼 수 없다.  &lt;br /&gt;
밖에 있는 사람들이 우리를 특정하기 위해서는 NAT를 통해야 한다.&lt;/p&gt;

&lt;h4 id=&quot;내가-지금-속해있는-라우터의-주소-확인-방법&quot;&gt;내가 지금 속해있는 라우터의 주소 확인 방법&lt;/h4&gt;

&lt;p&gt;“traceroute amazon.com” - 우리가 방문하는 라우터를 추적하는 코드      &lt;br /&gt;
이렇게 해서 제일 처음 나오는 ip주소가 내가 속해 있는 라우터의 공인 ip 주소이다.     &lt;br /&gt;
whois 112.188.32.213 이것을 통해서 이 ip주소의 주인이 누군지 알 수 있다.&lt;/p&gt;

&lt;p&gt;WAN mac주소와 (공인 ip에 묶여있는 맥주소)
LAN mac주소가 따로 있다. (private ip에 묶여 있는 맥주소)
이게 라우터가 2개 있다는 말이다.&lt;/p&gt;

&lt;p&gt;내가 속해 있는 iptime이 또 거쳐서 나가는게 기본 게이트웨이 이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://support.microsoft.com/ko-kr/help/164015/understanding-tcp-ip-addressing-and-subnetting-basics&quot;&gt;TCP/IP 주소 지정 및 서브넷 구성 기본 사항의 이해&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nat-network-address-translation--네트워크-주소를-바꾼다&quot;&gt;NAT (Network Address translation : 네트워크 주소를 바꾼다)&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;924&quot; alt=&quot;NAT&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55487907-f8f6f600-5669-11e9-83d2-cd7e122b9342.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;나 사설 ip긴 한데 내 ip주소는 저거고 도착지는 google이야  &lt;br /&gt;
나와 라우터는 LAN으로 묶여 있다. 사설 주소는 원래 못 나가는게 원칙이라 라우터가 바꿔준다.   &lt;br /&gt;
사설 ip와 공인 ip를 맵핑하고(변환테이블) 구글에 쏜다.  &lt;br /&gt;
이때 공인 ip는 어디든지 알 수 있으니깐 라우터의 공인 ip로 쏜다.(구글에서 접근 가능)   &lt;br /&gt;
구글에서 다시 돌아온 데이터는 변환 테이블을 보고 라우터가 ARP를 활용하여 나의 맥주소로 바꾼후 나에게 보내준다.&lt;/p&gt;

&lt;p&gt;— 정말 옛날 시스템이다. 라우터가 2개의 공인 ip가 있으면 맵핑을 할 때 2명밖에 불가능하다.&lt;/p&gt;

&lt;h2 id=&quot;해결책-napt-network-address-port-translation&quot;&gt;해결책 NAPT (Network Address Port Translation)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;라우터의 NIC가 딱 2개고 하나는 LAN 하나는 WAN에 물려있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;901&quot; alt=&quot;napt&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55488053-45423600-566a-11e9-8e60-2d690a84afb9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;라우터가 받은 다음 맵핑을 하되 포트까지 기록을 해놓는다.  &lt;br /&gt;
기본적으로 맵핑하는 공인 ip와 사설 ip를 동일한 포트번호로 쓰지만 &lt;br /&gt;
192.168.0.2 : 6000번과 192.168.0.4 : 6000번이 동시에 요청하면 포트번호를 한개는 6060으로 바꾸어서 저장한다.&lt;/p&gt;

&lt;p&gt;이것을 통해서 우리가 같이 유튜브 영상을 볼 수 있고   &lt;br /&gt;
대신 밖에 있는 사람은 우리에게 직접적으로 무언가를 요청할 수 없다.&lt;/p&gt;

&lt;p&gt;나는 유튜브의 공인 주소를 알고 있으므로 라우터를 거치지 않고 바로 data를 request할 수 있다.  &lt;br /&gt;
근데 유튜브는 나의 공인 주소를 알 수 없으므로 특정해서 데이터를 요청할 수 없다.&lt;/p&gt;

&lt;h2 id=&quot;이때-해결책이-port-forwarding이다&quot;&gt;이때 해결책이 port forwarding이다.&lt;/h2&gt;

&lt;p&gt;라우터야 내 사설 ip가 192.168.0.2:6060인데 너 혹시   &lt;br /&gt;
217.111.222.333:1010을 나한테만 좀 걸어줄 수 있어?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1:1로 바인딩해놓으면 다른 사람들은 이 포트를 못 쓰므로 유튜브가 위로 요청하면 나에게 요청하는것과 100% 일치한다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Apr 2019 03:06:23 +0900</pubDate>
        <link>http://localhost:4000/computer/2019/04/03/TIL(%E1%84%82%E1%85%A6%E1%84%90%E1%85%B3%E1%84%8B%E1%85%AF%E1%84%8F%E1%85%B3-interface,internet-).html</link>
        <guid isPermaLink="true">http://localhost:4000/computer/2019/04/03/TIL(%E1%84%82%E1%85%A6%E1%84%90%E1%85%B3%E1%84%8B%E1%85%AF%E1%84%8F%E1%85%B3-interface,internet-).html</guid>
        
        
        <category>computer</category>
        
      </item>
    
      <item>
        <title>2019_04_02_TIL(linux)</title>
        <description>&lt;h3 id=&quot;20190402-til&quot;&gt;2019.04.02 TIL&lt;/h3&gt;

&lt;p&gt;(TIL은 스스로 이해한 것을 바탕으로 정리한 것으로 오류가 있을 수 있습니다)&lt;/p&gt;

&lt;p&gt;# 질문에 답하기&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;리눅스의 접근, tar, booting, user&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;리눅스&quot;&gt;리눅스&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;access&lt;/li&gt;
  &lt;li&gt;tar&lt;/li&gt;
  &lt;li&gt;booting&lt;/li&gt;
  &lt;li&gt;user&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;access&quot;&gt;access&lt;/h2&gt;

&lt;h4 id=&quot;mkdir---directory-만들기&quot;&gt;mkdir - directory 만들기&lt;/h4&gt;
&lt;h4 id=&quot;touch---새로운-파일-만들기-or-최종-수정일자-바꾸기-없다면-만들고-있다면-최종-수정-날짜를-만든다&quot;&gt;touch - 새로운 파일 만들기 or 최종 수정일자 바꾸기 (없다면 만들고, 있다면 최종 수정 날짜를 만든다)&lt;/h4&gt;

&lt;h3 id=&quot;권한-설정해주기-chmod-change-mode&quot;&gt;권한 설정해주기 chmod (change mode)&lt;/h3&gt;
&lt;p&gt;ex)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rwxr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;월&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#소유자 / groups/ ohters/ 링크의 갯수 / 소유자 / 그룹 / 바이크 크기 / 최종 수정일자&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;r: read w: write x: execute
사용자 / 그룹 / 나머지&lt;/p&gt;

&lt;p&gt;그룹에 대한 권한을 숫자를 합한 값으로 한자리로 표현할 수도 있다.&lt;/p&gt;

&lt;p&gt;0 = — = 0+0+0.&lt;br /&gt;
 1 = –x = 0+0+1. &lt;br /&gt;
 2 = -w- = 0+2+0.&lt;br /&gt;
 3 = -wx = 0+2+1. &lt;br /&gt;
 4 = r– = 4+0+0.   &lt;br /&gt;
 5 = r-x = 4+0+1. &lt;br /&gt;
 6 = rw- = 4+2+0. &lt;br /&gt;
 7 = rwx = 4+2+1.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;777&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 권한 바꾸기(7은 모든 것을 주는 것이다.)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rwxrwxrwx&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;월&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;chmod u+r text.txt (user에게 read권한 추가)&lt;/p&gt;

&lt;p&gt;chmod g+w text.txt (group에게 write 권한 추가)&lt;/p&gt;

&lt;p&gt;chmod o=rwx text.txt (others에게 read, write, execute 권한 추가)&lt;/p&gt;

&lt;h3 id=&quot;하드링크--심볼리-링크&quot;&gt;하드링크 &amp;amp; 심볼리 링크&lt;/h3&gt;

&lt;h4 id=&quot;ln-testtxt-test2txt---하드링크&quot;&gt;ln test.txt test2.txt - 하드링크&lt;/h4&gt;
&lt;p&gt;하드링크를 걸어준다. 즉 메모리에는 같은 공간에 있지만 이것을 가르키는 것이 2개로 되는 것이다.
원본 파일이 삭제 되더라도 inode가 같으므로 여전히 사용 가능하다. (원본 파일을 삭제하더라도 레퍼런스 카운터가 0이 되지 않으므로 여전히 사용가능하다)
test와 test2가 링크로 연결되고 하지만 서로 저장 공간은 같다.(같은 하드디스크 안에서만 생성 가능)&lt;/p&gt;

&lt;h4 id=&quot;ln--s-texttxt-t---심볼릭-링크&quot;&gt;ln -s text.txt t - 심볼릭 링크&lt;/h4&gt;
&lt;p&gt;원본 파일의 이름을 가르키는 링크이다. 원본 파일이 사라지게 되면 역할을 수행할 수 없다.
심볼리링크는 ssd와 하드디스크를 서로 연결 시켜줄 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;398&quot; alt=&quot;심볼릭링크&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55406670-84538700-5597-11e9-97a2-ecf0c19ee9f8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위를 통해 심볼릭링크는 다른 id를 가지고 있고 하드링크(test.txt, test2.txt)는 같은 id주소를 가르키는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;ls - i (아이노드 - 메모리의 저장 공간 주소)&lt;/p&gt;

&lt;p&gt;ls -F : 이게 실행파일인지 심볼리 링크인지 하드링크인지 어떤 것인지 다 볼 수 있다.&lt;/p&gt;

&lt;p&gt;file python3 : 이것을 통해서 이 파일이 무엇인지 다 확인해 볼 수 있음&lt;/p&gt;

&lt;h3 id=&quot;파이썬-특수권한&quot;&gt;파이썬 특수권한&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;setUID : 설정된 파일을 실행할 때 일시적으로 파일 소유자의 권한을 얻어 실행할 수 있도록 한다.&lt;/li&gt;
  &lt;li&gt;setGID :  SetGID가 설정된 파일을 실행할 때 일시적으로 파일 소유그룹의 권한을 얻어 실행하도록 합니다.&lt;/li&gt;
  &lt;li&gt;Sticky Bit : Sticky Bit가 설정된 디렉토리에 파일을 생성하면 해당 파일은 생성한 사람의 소유가 되며 소유자와 root만이 해당 파일에 대한 삭제 및 수정에 대한 권한을 가질 수 있습니다. 즉, Sticky Bit가 설정된 디렉토리안에 누구나 파일을 생성할 수는 있지만 삭제는 본인과 관리자만 가능하게 되는겁니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;참고 🙂&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://eunguru.tistory.com/115&quot;&gt;[UNIX / Linux] 특수 권한(setuid, setgid, sticky bit) :: 오늘도 난, 하하하&lt;/a&gt;
&lt;a href=&quot;https://idchowto.com/?p=42667&quot;&gt;리눅스 특수권한(SetUID, SetGID, Stickybit) : 스마일서브 공식 블로그 [ IDC HOWTO ]&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;vim의-모드&quot;&gt;vim의 모드&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;normal — 켜자마자 나오는 모드&lt;/li&gt;
  &lt;li&gt;insert mode —&amp;gt; normal에서 i를 눌러야 한다. esc는 해제&lt;/li&gt;
  &lt;li&gt;visual mode —&amp;gt; 블록 설정 normal 에서 v를 눌러야 한다.&lt;/li&gt;
  &lt;li&gt;항상 명령은 normal에서 수행 shift + :   ==&amp;gt; 메뉴바
    &lt;ol&gt;
      &lt;li&gt;빠져나가기 :q&lt;/li&gt;
      &lt;li&gt;저장하기 : wq (저장하고 나가기)&lt;/li&gt;
      &lt;li&gt;좌우이동 : hjkl 만들기&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;apt_tarmd&quot;&gt;apt_tar.md&lt;/h2&gt;

&lt;h3 id=&quot;tar--묶는-것만-한다-type-archive&quot;&gt;tar : 묶는 것만 한다. (type archive)&lt;/h3&gt;

&lt;h3 id=&quot;cvf&quot;&gt;cvf&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;c : create&lt;/li&gt;
  &lt;li&gt;v : print info of files&lt;/li&gt;
  &lt;li&gt;f : consider the next name as the name of archive&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cvf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exam1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exam2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exam3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;exam.tar로 exam1.txt와 exam2.txt와 exam3.txt를 묶어라&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cvf로-합쳐진-요소들을-보는-것-tvf&quot;&gt;cvf로 합쳐진 요소들을 보는 것 tvf&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;t : table of contents&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;exam.tar로 묶인 것들을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cvf로-합쳐진-것을-푸는-것-xvf&quot;&gt;cvf로 합쳐진 것을 푸는 것 xvf&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;x : extract&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xvf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;exam.tar로 묶인 것들을 푼다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;booting&quot;&gt;booting&lt;/h2&gt;

&lt;p&gt;BIOS (basic input output)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;check hardware 를 해서 순서를 체크하고&lt;/li&gt;
  &lt;li&gt;boot loader( GRUB )를 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;리눅스의 서버의 용량이 모자라면 aws를 더 사면 되는데 
하드디스크를 하나 더 사서 꼽는다. 그렇게 해서 사용하기 위해서
아래와 같은 행동을 해야 한다.&lt;/p&gt;

&lt;p&gt;마운트를 태우기 위해서는&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;일단 파티션을 나눈다.
    &lt;ol&gt;
      &lt;li&gt;swap - ram크기와 비슷하거나, 2배 정도 잡는다.(가상메모리)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;파일시스템을 만든다.&lt;/li&gt;
  &lt;li&gt;이후에 마운트를 한다.
    &lt;ol&gt;
      &lt;li&gt;리눅스에 설치를 할 때 디렉토리에 연결해야 한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;사용 이후에 un마운트를 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;user&quot;&gt;user&lt;/h2&gt;

&lt;p&gt;서버에 대한 권한을 준다.
사용자를 추가한다. 그리고 그 사용자에게 비밀번호를 설정하게 하고 
그러한 사용자들을 그룹으로 묶을 수도 있다.&lt;/p&gt;

&lt;h3 id=&quot;리눅스-사용자-추가&quot;&gt;리눅스 사용자 추가&lt;/h3&gt;

&lt;p&gt;sudo useradd -s /bin/sh -m -d /home/john john&lt;/p&gt;

&lt;h3 id=&quot;사용자-비밀번호-설정&quot;&gt;사용자 비밀번호 설정&lt;/h3&gt;

&lt;p&gt;sudo passed john&lt;/p&gt;

&lt;h3 id=&quot;리눅스파일에-대한-사용자-바꾸기&quot;&gt;리눅스파일에 대한 사용자 바꾸기&lt;/h3&gt;

&lt;p&gt;sudo chown greg test.txt       #change own&lt;/p&gt;

&lt;h3 id=&quot;리눅스-파일에-대한-그룹-바꾸기&quot;&gt;리눅스 파일에 대한 그룹 바꾸기&lt;/h3&gt;

&lt;p&gt;sudo chown :greg test.txt&lt;/p&gt;

&lt;h3 id=&quot;그룹-만들기&quot;&gt;그룹 만들기&lt;/h3&gt;

&lt;p&gt;sudo grouped wps10&lt;/p&gt;

&lt;h3 id=&quot;그룹-만들어졌는지-확인&quot;&gt;그룹 만들어졌는지 확인&lt;/h3&gt;

&lt;p&gt;cat /etc/group&lt;/p&gt;

&lt;h3 id=&quot;그룹에-멤버-추가하기&quot;&gt;그룹에 멤버 추가하기&lt;/h3&gt;

&lt;p&gt;sudo gpasswd -a greg wps10
cat /etc/group 를 해서 추가됬는지 확인&lt;/p&gt;

&lt;h3 id=&quot;폴더에-대한-사용자-바꾸기-가장-하위까지-다-바꿈&quot;&gt;폴더에 대한 사용자 바꾸기 (가장 하위까지 다 바꿈)&lt;/h3&gt;

&lt;p&gt;sudo chown -R greg:wps10 test_dir&lt;/p&gt;

&lt;h3 id=&quot;그룹의-비밀번호-설정&quot;&gt;그룹의 비밀번호 설정&lt;/h3&gt;

&lt;p&gt;sudo gpasswd wps10&lt;/p&gt;

&lt;h3 id=&quot;그룹에-사용자-가입&quot;&gt;그룹에 사용자 가입&lt;/h3&gt;

&lt;p&gt;newgrp wps10
그리고 패스워드 입력&lt;/p&gt;

&lt;h3 id=&quot;그룹지우기&quot;&gt;그룹지우기&lt;/h3&gt;

&lt;p&gt;sudo grouped wps10
cat /etc/group 으로 확인&lt;/p&gt;

&lt;h3 id=&quot;사용자-지우기&quot;&gt;사용자 지우기&lt;/h3&gt;

&lt;p&gt;sudo userdel -r john 
cat /etc/p&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;리눅스가 필요할 때 우분투 리눅스 이종원님 책 참고하자!&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 02 Apr 2019 03:06:23 +0900</pubDate>
        <link>http://localhost:4000/computer/2019/04/02/TIL(%E1%84%85%E1%85%B5%E1%84%82%E1%85%AE%E1%86%A8%E1%84%89%E1%85%B3).html</link>
        <guid isPermaLink="true">http://localhost:4000/computer/2019/04/02/TIL(%E1%84%85%E1%85%B5%E1%84%82%E1%85%AE%E1%86%A8%E1%84%89%E1%85%B3).html</guid>
        
        
        <category>computer</category>
        
      </item>
    
      <item>
        <title>2019_04_01_TIL(자료구조/linked List)</title>
        <description>&lt;h3 id=&quot;20190401-til&quot;&gt;2019.04.01 TIL&lt;/h3&gt;

&lt;p&gt;(TIL은 스스로 이해한 것을 바탕으로 정리한 것으로 오류가 있을 수 있습니다)&lt;/p&gt;

&lt;p&gt;# 질문에 답하기&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;자료구조의 큰 틀에 대해 이야기하기&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;자료구조&quot;&gt;자료구조&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;자료구조는 메모리에 data를 어떻게 저장할 것인가에 대한 고민부터 시작된다.&lt;/strong&gt;  &lt;br /&gt;
list, tuple, dictionary 모두 자료구조의 한 형태이다&lt;/p&gt;

&lt;p&gt;자료구조는 딱 3가지이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;데이터를 어떻게 삽입할 것인가?(insert)&lt;/li&gt;
  &lt;li&gt;데이터를 어떻게 검색할 것인가?(search)&lt;/li&gt;
  &lt;li&gt;데이터를 어떻게 삭제할 것인가?(delete)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;adtabstract-data-type--추상-자료형&quot;&gt;ADT(abstract data type) : 추상 자료형&lt;/h1&gt;

&lt;h3 id=&quot;자료-구조에서-삽입-탐색-삭제-등을-담당하는-함수들의-사용-설명서&quot;&gt;자료 구조에서 삽입, 탐색, 삭제 등을 담당하는 함수들의 사용 설명서&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;어떤 자료구조가 가지고 있는 오퍼레이션(함수)의 나열(목록)&lt;/li&gt;
  &lt;li&gt;함수 시그니처(인터페이스)만 나열할 뿐, 내부 구현은 표기하지 않음&lt;/li&gt;
  &lt;li&gt;함수(operation)의 작동 방식 설명.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ex)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method_descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우리는 여기에서 append함수가 어떻게 구현되었는지 알 수 없다. 하지만 append함수를 사용하는 것에는 전혀 문제가 없다. 이러한 특징을 인터페이스와 구현이 분리되었다고 하며 추상화라는 표현을 쓴다.&lt;/p&gt;

&lt;h1 id=&quot;linked-list&quot;&gt;linked List&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;데이터와 참조로 구성된 노드가 한 방향 혹은 양방향으로 쭉 이어져 있는 자료구조&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;single linked list&lt;/li&gt;
  &lt;li&gt;double linked list&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;노드&quot;&gt;노드&lt;/h2&gt;

&lt;h3 id=&quot;자료구조를-구현할-때-데이터를-담는-틀&quot;&gt;자료구조를 구현할 때 데이터를 담는 틀&lt;/h3&gt;

&lt;p&gt;&lt;img width=&quot;645&quot; alt=&quot;node&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55322765-31ef6900-54b8-11e9-9419-8f2e79a98fd8.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;노드는 저장할 데이터와 다음 노드를 가르키는 참조로 이루어져 있다.(단일 연결리스트)&lt;/li&gt;
  &lt;li&gt;double linked list에서는 다른 형태의 노드가 활용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;single-linked-list&quot;&gt;single linked list&lt;/h2&gt;

&lt;h3 id=&quot;single-linked-list에서의-노드-구현&quot;&gt;single linked list에서의 노드 구현&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# 소멸자&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 객체가 사라지기 전에 반드시 한번 호출하는 것을 보장한다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 소멸자를 호출하고 지우는 것을 보장해준다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 실제 로드가 사라지는 것을 확인하기 위해서 가지고 옴&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__del__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'node[{self.__data}] deleted!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; 
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__data&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@data.setter&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@link.setter&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
		
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;자료구조에서는 보안이 중요하므로 정보은닉 2가지를 모두 적용해주었다.&lt;/li&gt;
  &lt;li&gt;멤버 __data에는 데이터를 저장하고, 멤버 __ next는 다음 노드를 가르킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;single-linked-list의-인스턴스-멤버&quot;&gt;single linked list의 인스턴스 멤버&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;head -&amp;gt; 리스트의 첫 번째 노드를 가르킨다.&lt;/li&gt;
  &lt;li&gt;d_size -&amp;gt; 리스트의 요소 개수이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;single-linked-list의-adt&quot;&gt;single linked list의 ADT&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;S.empty() —&amp;gt; Boolean
    &lt;ul&gt;
      &lt;li&gt;리스트가 비었으면 True, 아니면 False&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;S.size() —&amp;gt; integer
    &lt;ul&gt;
      &lt;li&gt;리스트에 있는 요소 개수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;S.add() —&amp;gt; None
    &lt;ul&gt;
      &lt;li&gt;노드를 리스트의 맨 앞에 추가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;S.search(target) —&amp;gt; node
    &lt;ul&gt;
      &lt;li&gt;리스트에서 target을 찾는다.&lt;/li&gt;
      &lt;li&gt;찾으면 노드를, 못 찾으면 None 반환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;S.delete() —&amp;gt; None
    &lt;ul&gt;
      &lt;li&gt;맨 앞의 노드 삭제&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;single-linked-list-구현&quot;&gt;single linked list 구현&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SLinkedlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
		
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
			
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt;
		
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;new_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;new_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_data&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
		
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;찾으신 데이터:{cur.data}가 있습니다&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
		
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
	
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLinkedlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;show_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;show_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;찾으신&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;데이터&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;가&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;있습니다&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dummy-double-linked-list&quot;&gt;Dummy double linked list&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;dummy
    &lt;ul&gt;
      &lt;li&gt;더미란 데이터를 가지지 않는 노드를 의미한다.&lt;/li&gt;
      &lt;li&gt;double linked list에서는 양 옆에 배치한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;구현 이유
    &lt;ul&gt;
      &lt;li&gt;더미가 있게 됨으로서 데이터가 있던지 없던지 상관없이 간단하게 데이터를 추가 삭제할 수 있게 되었다.원래는 뒤에 데이터가 있는지 앞에 데이터가 있는지 확인을 해야하지만 더미(head와 tail)이 있게 되므로서 상관하지 않고 구현할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;double-linked-list-노드&quot;&gt;double linked list 노드&lt;/h3&gt;

&lt;p&gt;&lt;img width=&quot;724&quot; alt=&quot;노드1&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55327352-decfe300-54c4-11e9-8ef9-965a471d4554.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dummy-double-linked-list-instance-member&quot;&gt;Dummy double linked list instance Member&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;instance member&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;head : 리스트 맨 앞에 있는 더미를 가르킨다.&lt;/li&gt;
      &lt;li&gt;tail : 리스트 맨 뒤에 있는 더미를 가르킨다.&lt;/li&gt;
      &lt;li&gt;d_size : 리스트의 요소 개수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ADT&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img width=&quot;923&quot; alt=&quot;double linked list 1&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55327732-b7c5e100-54c5-11e9-80bc-122c7e654708.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;899&quot; alt=&quot;double linked list 2&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55327739-bbf1fe80-54c5-11e9-8d47-174f4c357bae.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dummy-double-linked-list-구현&quot;&gt;Dummy double linked list 구현&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__del__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data of {} is deleted&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__data&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@data.setter&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__prev&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@prev.setter&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@property&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@next.setter&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;created:[{self.__data}]&quot;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DoubleLinkedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
			
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  
		&lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
		&lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

       
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 항상 제일 앞에는 first가 있다고 가정한다.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insert_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;			
		&lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insert_before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_node&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search_forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;  

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search_backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;


	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;	    
			&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
			&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;

		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete_last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;
		
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# 편의 함수&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		    &lt;span class=&quot;c&quot;&gt;# 리스트의 첫 데이터부터 순회를 시작&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
		    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# is는 객체 자체의 비교이다.&lt;/span&gt;
		        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;
		        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;
		  
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		    &lt;span class=&quot;c&quot;&gt;# 리스트의 마지막 데이터부터 순회&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;
		    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 만약에 아래 쪽에 node.data를 안했으면 cur.data해야 한다.&lt;/span&gt;
		        &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoubleLinkedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;show_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# 데이터를 찾은 이유는 그 뒤에 데이터를 넣기 위해서&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;searched_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_backward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searched_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# dlist.delete_node(searched_data)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert_before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searched_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;searched data:{searched_data.data}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'기준 노드가 없습니다. 다시 확인해주세요.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;show_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# dlist.delete_first()&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# dlist.delete_last()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;del_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search_forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;del_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# del_data가 15를 가르키고 있으므로 레퍼런스 카운터가 0이 안된다. 따라서 None을 해서 레퍼런스 카운터를 0으로 만든다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;del_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;del_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;기준 노드가 없습니다. 다시 확인해주세요&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;show_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# generator 객체&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;searched&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;****************************************************************************************************&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;self를 앞에 붙이는 것은 무언가 지속적으로 남겨놓을 때 붙인다.&lt;/li&gt;
  &lt;li&gt;따라서 지속적으로 남겨놓을 필요가 없을 때는 붙이지 않는다.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 01 Apr 2019 03:06:23 +0900</pubDate>
        <link>http://localhost:4000/computer/2019/04/01/TIL(%E1%84%8C%E1%85%A1%E1%84%85%E1%85%AD%E1%84%80%E1%85%AE%E1%84%8C%E1%85%A9_linked_list).html</link>
        <guid isPermaLink="true">http://localhost:4000/computer/2019/04/01/TIL(%E1%84%8C%E1%85%A1%E1%84%85%E1%85%AD%E1%84%80%E1%85%AE%E1%84%8C%E1%85%A9_linked_list).html</guid>
        
        
        <category>computer</category>
        
      </item>
    
      <item>
        <title>2019_03_29_TIL(컴파일언어&amp;인터프리터언어)</title>
        <description>&lt;h3 id=&quot;20190329-til&quot;&gt;2019.03.29 TIL&lt;/h3&gt;

&lt;p&gt;(TIL은 스스로 이해한 것을 바탕으로 정리한 것으로 오류가 있을 수 있습니다)&lt;/p&gt;

&lt;p&gt;# 질문에 답하기&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;컴파일-언어--인터프리터-언어&quot;&gt;컴파일 언어 &amp;amp; 인터프리터 언어&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;컴파일 언어와 인터프리터 언어는 컴파일 타임이 있느냐 없느냐, 즉 소스 코드를 분석하는 시점과 입력 데이터를 받는 시점이 언제냐에 따라 나뉜다.&lt;/li&gt;
  &lt;li&gt;컴파일러 언어는 소스코드를 분석하는 컴파일 시간과 입력 데이터를 실행하는 런타임 시간이 따로 나누어져 있다.&lt;/li&gt;
  &lt;li&gt;인터프리터 언어는 소스코드를 분석하는 컴파일 시간이 따로 없고 소스코드와 입력 데이터를 동시에 입력받아 결과물을 출력한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;한장으로-먼저-보기&quot;&gt;한장으로 먼저 보기&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;998&quot; alt=&quot;컴파일언어 인터프리터언어&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55843477-71cae600-5b73-11e9-84a1-5fcb195ef49f.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;컴파일-언어&quot;&gt;컴파일 언어&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;631&quot; alt=&quot;컴파일 언어&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55843624-2bc25200-5b74-11e9-9519-3a21bf0eafc6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://thebook.io/006950/ch11/01/02/&quot;&gt;출처: 컴퓨터 사이언스 부트캠프 with 파이썬 인터프리터 언어 분석&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;c언어를 예로 들면&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;소스 코드를 컴파일 하여 목적 파일 혹은 목적 코드인 기계어로 된 인스트럭션을 만들어 낸다.&lt;/li&gt;
  &lt;li&gt;링커는 필요한 라이브러리를 가져오고 여러개의 목적 파일을 묶어 실행 파일을 생성한다.&lt;/li&gt;
  &lt;li&gt;이제 프로그램을 실행하고 입력 데이터를 입력하면 결과 값을 도출한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;인터프리터-언어&quot;&gt;인터프리터 언어&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;636&quot; alt=&quot;인터프리터언어&quot; src=&quot;https://user-images.githubusercontent.com/46436843/55843622-2b29bb80-5b74-11e9-94c2-f08a0ef5ff68.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://thebook.io/006950/ch11/01/02/&quot;&gt;출처: 컴퓨터 사이언스 부트캠프 with 파이썬 인터프리터 언어 분석&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;파이썬을 예로 들면 &lt;br /&gt;
일반적으로 컴파일러는 렉서와 파서로 구성된다.&lt;/p&gt;

&lt;h3 id=&quot;렉서&quot;&gt;렉서&lt;/h3&gt;

&lt;p&gt;렉서는 소스 코드(컴퓨터 입장에서는 문자)를 입력 받아 여러개의 토큰으로 변경시킨다. &lt;br /&gt;
토큰은 “나는 사과를 먹었다”는 문장을 &amp;lt;주어, “나는”&amp;gt; , &amp;lt;목적어, “사과를”&amp;gt; , &amp;lt;동사, “먹었다”&amp;gt;와 같이 변수 또는 함수 이름, 연산자등으로 소스코드를 나눈다.&lt;/p&gt;

&lt;h3 id=&quot;파서&quot;&gt;파서&lt;/h3&gt;

&lt;p&gt;파서는 토큰을 분석하여 분석 트리를 구성한다.&lt;br /&gt;
그리고 이 분석트리를 이용하여 추상 구문 트리를 만든다. &lt;br /&gt;
추상 구문 트리(Abstract Syntax Tree, AST)란 소스 코드의 구조를 나타내는 자료 구조이다. 추상 구문 트리를 바탕으로 심벌 테이블을 만들고 바이트 코드를 생성할 수 있다.&lt;/p&gt;

&lt;p&gt;심벌 테이블은 변수나 함수의 이름과 그 속성을 기술 해 놓은 테이블이다.&lt;/p&gt;

&lt;p&gt;추상 구문 트리와 심벌 테이블을 바탕으로 바이트 코드 인터스트럭션을 생성한다.&lt;/p&gt;

&lt;h3 id=&quot;실행&quot;&gt;실행&lt;/h3&gt;

&lt;p&gt;그리고 이 바이트 코드 인터스트럭션은 파이썬 가상 머신인 PVM을 통해 실행된다. PVM은 굉장히 큰 무한 루프이다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;컴파일 언어는 대표적으로 C언어가 이에 해당하고, 대다수의 프로그래밍 언어가 이에 해당한다. 작성한 코드를 기계어로 번역을 해놓기 때문에
실행 속도가 빠르고 보안성이 높다. &lt;br /&gt;
하지만, 코드 수정을 조금이라도 한다면, 다시 컴파일을 해야 하기 때문에
개발 기간이 오래 걸리지만, 개발 후 실행 속도는 가장 빠르다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인터프리터 언어는 대표적으로 python언어가 이에 해당되고, 컴파일 언어와는 달리 코드를 한 줄씩 번역, 실행하는 방식이다. 따라서 실행 속도는 컴파일 언어 보다 느리지만, 코드 수정시 바꾼 부분만 번역, 실행하여 빠르게 수정이 가능하다. 심지어 실행 중에도 수정이 가능하다.  &lt;br /&gt;
그리고, 컴파일 언어보다 문법이 쉬운 편이다. 단, 보안성이 떨어지는 편이다. 하지만, 작성이 빠르기 때문에, 빠른 아이디어 구현이 쉬워 빠른 프로그램 구현이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 29 Mar 2019 03:06:23 +0900</pubDate>
        <link>http://localhost:4000/computer/2019/03/29/TIL(%E1%84%8F%E1%85%A5%E1%86%B7%E1%84%91%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%AF%E1%84%8B%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%A5&%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%90%E1%85%A5%E1%84%91%E1%85%B3%E1%84%85%E1%85%B5%E1%84%90%E1%85%A5%E1%84%8B%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%A5).html</link>
        <guid isPermaLink="true">http://localhost:4000/computer/2019/03/29/TIL(%E1%84%8F%E1%85%A5%E1%86%B7%E1%84%91%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%AF%E1%84%8B%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%A5&%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%90%E1%85%A5%E1%84%91%E1%85%B3%E1%84%85%E1%85%B5%E1%84%90%E1%85%A5%E1%84%8B%E1%85%A5%E1%86%AB%E1%84%8B%E1%85%A5).html</guid>
        
        
        <category>computer</category>
        
      </item>
    
      <item>
        <title>2019_03_28_TIL(Stack으로 Queue 구현하기)</title>
        <description>&lt;h3 id=&quot;20190328-til&quot;&gt;2019.03.28 TIL&lt;/h3&gt;

&lt;p&gt;(TIL은 스스로 이해한 것을 바탕으로 정리한 것으로 오류가 있을 수 있습니다)&lt;/p&gt;

&lt;p&gt;# 질문에 답하기&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Stack 2개로 queue 구현하기&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;stack와-queue&quot;&gt;Stack와 Queue&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Stack과 Queue는 모두 컴퓨터 자료구조 방법론에 해당한다.&lt;/li&gt;
  &lt;li&gt;Stack : LIFO (last in first out) 후입 선출&lt;/li&gt;
  &lt;li&gt;Stack의 ADT (operation list , operation의 시그니처만 나열)
    &lt;ol&gt;
      &lt;li&gt;S.empty() –&amp;gt; Boolean (스택이 비어있으면 True, 아니면 False)&lt;/li&gt;
      &lt;li&gt;S.push(data) —&amp;gt; None (스택의 맨 위에 데이터를 쌓는다.) None-&amp;gt;무조건들어간다&lt;/li&gt;
      &lt;li&gt;S.pop() —&amp;gt; data (스택 맨 위의 데이터를 삭제하면서 반환)&lt;/li&gt;
      &lt;li&gt;S.peek() —&amp;gt; data (스택 맨 위의 데이터를 반환)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Queue : FIFO (first in first out) 선입 선출&lt;/li&gt;
  &lt;li&gt;Queue의 ADT (operation list , operation의 시그니처만 나열)
    &lt;ol&gt;
      &lt;li&gt;Q.empty() —&amp;gt; Boolean (큐가 비어있으면 true, 비어있으면 False)&lt;/li&gt;
      &lt;li&gt;Q.enqueue(data) —&amp;gt; None (큐의 맨 뒤에 데이터를 쌓는다.)&lt;/li&gt;
      &lt;li&gt;Q.dequeue(data) —&amp;gt; data (큐의 맨 앞에 데이터를 삭제하면서 반환)&lt;/li&gt;
      &lt;li&gt;Q.peek() —&amp;gt; data (큐의 맨 앞의 데이터를 반환)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;stack의-adt-구현&quot;&gt;Stack의 ADT 구현&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;ADT 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 스택의 ADT를 표시할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;queue의-adt-구현&quot;&gt;Queue의 ADT 구현&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;ADT 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;     
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 Queue의 ADT를 표시할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;stack-2개로-queue-구현하기&quot;&gt;Stack 2개로 Queue 구현하기&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;2개의 Stack을 활용하여 Queue의 ADT를 구현해야 한다.&lt;/li&gt;
  &lt;li&gt;Stack의 ADT를 활용할 수 있다.&lt;/li&gt;
  &lt;li&gt;1개의 자료는 Stack을 Stack1 –&amp;gt; Stack2로 한번만 이동가능하다.&lt;/li&gt;
  &lt;li&gt;같은 폴더 안에 Stack의 ADT가 저장되어 있다고 가정(import 사용)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;실제-구현&quot;&gt;실제 구현&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 	
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;			&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;			&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;			&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;				&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;					&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;				&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;					&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;Que&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;Que&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Que&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Que&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Que&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Que&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Que&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Que&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;		
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;이해하기가-쉽지-않다면-유튜브-영상을-추천한다&quot;&gt;이해하기가 쉽지 않다면 유튜브 영상을 추천한다.&lt;/h4&gt;
&lt;p&gt;[추천 참고 영상] (https://youtu.be/t45d7CgDaDM)&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Mar 2019 03:06:23 +0900</pubDate>
        <link>http://localhost:4000/computer/2019/03/28/TIL(Stack%E1%84%8B%E1%85%B3%E1%84%85%E1%85%A9-Queue%E1%84%80%E1%85%AE%E1%84%92%E1%85%A7%E1%86%AB%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5).html</link>
        <guid isPermaLink="true">http://localhost:4000/computer/2019/03/28/TIL(Stack%E1%84%8B%E1%85%B3%E1%84%85%E1%85%A9-Queue%E1%84%80%E1%85%AE%E1%84%92%E1%85%A7%E1%86%AB%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5).html</guid>
        
        
        <category>computer</category>
        
      </item>
    
  </channel>
</rss>
